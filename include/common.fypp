#:mute
#:if not defined("WIN32")
#:set WIN32 = False
#:endif
#:if not defined("UNIX")
#:set UNIX = True
#:endif
#:if not defined("XDP_SUPPORT")
#:set XDP_SUPPORT = False
#:endif
#:if not defined("QP_SUPPORT")
#:set QP_SUPPORT = False
#:endif
#:if not defined("HP_SUPPORT")
#:set HP_SUPPORT = False
#:endif
#:if not defined("MAXIMUM_RANK")
#:set MAXIMUM_RANK = 1
#:endif

#:if WIN32
#:set PATH_SLASH = "'\'"
#:elif UNIX
#:set PATH_SLASH = "'/'"
#:endif

#:set RANK_ITERi  = [(i, None) for i in range(MAXIMUM_RANK + 1)]
#:set RANK_ITERii = [(i, i) for i in range(MAXIMUM_RANK + 1)] + [(i, 0) for i in range(1, MAXIMUM_RANK + 1)]
#:set RANK_SCALAR = [(0, None)]
#:set RANK_MATRIX = [(2, None)]

#:set INTEGER_KINDS = ["INT8", "INT16", "INT32", "INT64"]
#:set INTEGER_POSTFIX = ["i8", "i16", "i32", "i64"]

#:set REAL_KINDS = ["sp", "dp"]
#:set REAL_POSTFIX = ["r32", "r64"]
#:set COMPLEX_POSTFIX = ["c32", "c64"]

#:if XDP_SUPPORT
#:set REAL_KINDS = REAL_KINDS + ["xdp"]
#:set REAL_POSTFIX = REAL_POSTFIX + ["r80"]
#:set COMPLEX_POSTFIX = COMPLEX_POSTFIX + ["c80"]
#:endif
#:if QP_SUPPORT
#:set REAL_KINDS = REAL_KINDS + ["qp"]
#:set REAL_POSTFIX = REAL_POSTFIX + ["r128"]
#:set COMPLEX_POSTFIX = COMPLEX_POSTFIX + ["c128"]
#:endif
#:if HP_SUPPORT
#:set REAL_KINDS = ["hp"] + REAL_KINDS
#:set REAL_POSTFIX = ["r16"] + REAL_POSTFIX
#:set COMPLEX_POSTFIX = ["c16"] + COMPLEX_POSTFIX
#:endif
#:set LOGICAL_KINDS = [""]
#:set LOGICAL_TYPES = ["logical"]
#:set LOGICAL_POSTFIX = ["logical"]

#:set LOGICAL_FORMAT = "A,1X,L,1X,A,1X,L,1X,A"
#:set INTEGER_FORMAT = "A,1X,I0,1X,A,1X,I0,1X,A"
#:set REAL_FORMAT = "A,G16.9,A,G16.9,A"
#:set COMPLEX_FORMAT = "A,2(ES9.2,1X),A,2(ES9.2,1X),A"

#:set INTEGER_TYPES = [f"integer({k})" for k in INTEGER_KINDS]
#:set REAL_TYPES = [f"real({k})" for k in REAL_KINDS]
#:set COMPLEX_TYPES = [f"complex({k})" for k in REAL_KINDS]
#:set LOGICAL_TYPES = [f"logical"]

#:set INTEGER_KIND_TYPE_POSTS = list(zip(INTEGER_KINDS, INTEGER_TYPES, INTEGER_POSTFIX))
#:set REAL_KIND_TYPE_POSTS = list(zip(REAL_KINDS, REAL_TYPES, REAL_POSTFIX))
#:set COMPLEX_KIND_TYPE_POSTS = list(zip(REAL_KINDS, COMPLEX_TYPES, COMPLEX_POSTFIX))
#:set LOGICAL_KIND_TYPE_POSTS = list(zip(LOGICAL_KINDS, LOGICAL_TYPES, LOGICAL_POSTFIX))

#:set OPERATORS = ["==", "/=", "<", "<=", ">", ">=", ".eqv.", ".neqv.", "~", "!~", "", ".not."]
#:set NEGA_OPRS = ["/=", "==", ">=", ">", "<=", "<", ".neqv.", ".eqv.", "!~", "~", ".not.", ""]
#:set OPERATOR_STRINGS = ["==", "!=", "< ", "<=", "> ", ">=", "equiv", "noteq", "~", "!~", "true", "false"]
#:set NEGA_OPR_STRINGS = ["!=", "==", ">=", "> ", "<=", "< ", "noteq", "equiv", "!~", "~", "false", "true"]
#:def negation(op)
$:NEGA_OPRS[OPERATORS.index(op)]
#:enddef
#:def strop(op)
$:OPERATOR_STRINGS[OPERATORS.index(op)]
#:enddef
#:def strnop(op)
$:NEGA_OPR_STRINGS[OPERATORS.index(op)]
#:enddef

#:def routine_name(g, post, rank1, rank2=None)
$:f"unittest_assert_" + ("" if g == "" else g + "_") + f"{post}_{rank1}" if rank2 is None else f"unittest_assert_" + ("" if g == "" else g + "_") + f"{post}_{rank1}{rank2}"
#:enddef

#:def decimal_suffix(i, kind)
$:f"{i}.0_" + kind if "REAL" in kind else f"{i}_" + kind
#:enddef
#:def rank_suffix(rank)
#{if rank>0}#(${",".join([":" for i in range(rank)])}$)#{endif}#
#:enddef
#:def counter_suffix(rank)
#{if rank>0}#(${", ".join(["i"+str(i+1) for i in range(rank)])}$)#{endif}#
#:enddef
#:def do_start(rank, var=None)
#:for i in range(rank,0,-1)
        do i${i}$ = 1, SIZE(${"a" if var is None else var}$, ${i}$)
#:endfor
#:enddef
#:def do_end(rank)
#:for i in range(rank)
        end do
#:endfor
#:enddef

#:def generic_procedure(g, tup, ranks)
#:for rank1, rank2 in ranks
#:for kind, type, post in tup
procedure, private :: ${routine_name(g, post, rank1, rank2)}$
#:endfor
#:endfor
generic            :: assert${"" if g == "" else "_" + g}$ => &
${", &\n  ".join([", &\n  ".join(["                      " + routine_name(g, post, rank1, rank2) for kind, type, post in tup]) for rank1, rank2 in ranks])}$
#:enddef

#:def flatten(expr, rank1, rank2=None)
$:f"{expr}" if rank1 == 1 and (rank2 is None or rank2 == 1) else f"[{expr}]"
#:enddef

#:def common_check(rank1, rank2, routine)
$:common_check_1(routine) if rank1>0 and (rank2 is not None and rank2>0) else common_check_0()
#:enddef

#:def common_check_0()
    logical :: err
#:enddef
#:def common_check_1(routine)
    logical :: err
    err = ANY(SHAPE(a) /= SHAPE(b))
    if(PRESENT(is_failed)) is_failed = err
    if (err) then
      call test_result_append(this%results, err)
      call report_rank_error(this%dev, this%results(SIZE(this%results))%id, this%nest, SHAPE(a), SHAPE(b), this%tap_support, "${routine}$", unitname)
      return
    end if
#:enddef
#:def report_result(routine)
    call report_result(this%dev, this%results(SIZE(this%results))%id, this%nest, err, this%tap_support, "${routine}$", unitname)
#:enddef

#:set L_MSG = 56
#:set L_WDH = L_MSG - 12
#:set WSPC = '"#"' + "//REPEAT(' ', 7)"
#:set SEP3 = WSPC + "//REPEAT('-', " + str(L_MSG) + ")"

#:endmute
