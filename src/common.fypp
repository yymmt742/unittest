#:mute

#:if not defined("XDP_SUPPORT")
#:set XDP_SUPPORT = False
#:endif

#:if not defined("QP_SUPPORT")
#:set QP_SUPPORT = False
#:endif

#:if not defined("HP_SUPPORT")
#:set HP_SUPPORT = False
#:endif

#:set INTEGER_KINDS = ["INT8", "INT16", "INT32", "INT64"]
#:set INTEGER_POSTFIX = ["i8", "i16", "i32", "i64"]
#:set REAL_KINDS = ["sp", "dp"]
#:set REAL_POSTFIX = ["r32", "r64"]
#:set COMPLEX_POSTFIX = ["c32", "c64"]
#:if XDP_SUPPORT
#:set REAL_KINDS = REAL_KINDS + ["xdp"]
#:set REAL_POSTFIX = REAL_POSTFIX + ["r80"]
#:set COMPLEX_POSTFIX = COMPLEX_POSTFIX + ["c80"]
#:endif
#:if QP_SUPPORT
#:set REAL_KINDS = REAL_KINDS + ["qp"]
#:set REAL_POSTFIX = REAL_POSTFIX + ["r128"]
#:set COMPLEX_POSTFIX = COMPLEX_POSTFIX + ["c128"]
#:endif
#:if HP_SUPPORT
#:set REAL_KINDS = ["hp"] + REAL_KINDS
#:set REAL_POSTFIX = ["r16"] + REAL_POSTFIX
#:set COMPLEX_POSTFIX = ["c16"] + COMPLEX_POSTFIX
#:endif
#:set LOGICAL_KINDS = [""]
#:set LOGICAL_TYPES = ["logical"]
#:set LOGICAL_POSTFIX = ["logical"]

#:set INTEGER_TYPES = [f"integer({k})" for k in INTEGER_KINDS]
#:set REAL_TYPES = [f"real({k})" for k in REAL_KINDS]
#:set COMPLEX_TYPES = [f"complex({k})" for k in REAL_KINDS]
#:set LOGICAL_TYPES = [f"logical"]

#:set INTEGER_KIND_TYPE_POSTS = list(zip(INTEGER_KINDS, INTEGER_TYPES, INTEGER_POSTFIX))
#:set REAL_KIND_TYPE_POSTS = list(zip(REAL_KINDS, REAL_TYPES, REAL_POSTFIX))
#:set COMPLEX_KIND_TYPE_POSTS = list(zip(REAL_KINDS, COMPLEX_TYPES, COMPLEX_POSTFIX))
#:set LOGICAL_KIND_TYPE_POSTS = list(zip(LOGICAL_KINDS, LOGICAL_TYPES, LOGICAL_POSTFIX))

#:set COUNTER_VAR = ["i", "j", "k", "l", "m", "n"]

#:def decimal_suffix(i, kind)
$:f"{i}.0_" + kind if "REAL" in kind else f"{i}_" + kind
#:enddef

#:def routine_name(g, post, rank1, rank2=None)
$:f"unittest_{g}_{post}_{rank1}" if rank2 is None else f"unittest_{g}_{post}_{rank1}{rank2}"
#:enddef

#:def rank_suffix(rank)
#{if rank>0}#(${",".join([":" for i in range(rank)])}$)#{endif}#
#:enddef

#:def counter_suffix(rank)
#{if rank>0}#(${",".join(COUNTER_VAR[:rank])}$)#{endif}#
#:enddef

#:def generic_procedure(g, tup, ranks)
#:for rank1, rank2 in ranks
#:for kind, type, post in tup
procedure, private :: ${routine_name(g, post, rank1, rank2)}$
#:endfor
#:endfor
generic            :: ${g}$ => &
${", &\n  ".join([", &\n  ".join(["                      " + routine_name(g, post, rank1, rank2) for kind, type, post in tup]) for rank1, rank2 in ranks])}$
#:enddef

#:set inc_ntest = "    this%num_test = this%num_test + 1"
#:set rankcheck = "    call check_rank(this%dev, this%num_test, SIZE(a), SIZE(b), unitname, this%num_error, err)\n    if (err) return" 
#:def rank_check(rank1, rank2)
$:inc_ntest+"\n"+rankcheck if rank1>0 and rank2>0 else inc_ntest
#:enddef

#:def flatten(expr, rank1, rank2=None)
$:f"{expr}" if rank1 == 1 and (rank2 is None or rank2 == 1) else f"[{expr}]"
#:enddef

#:endmute
