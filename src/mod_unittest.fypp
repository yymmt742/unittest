#:include "common.fypp"
module mod_unittest
  !! Fortran unit testing framework.
  !  This module provides an interface class to the assert method.
  use, intrinsic :: ISO_FORTRAN_ENV, only: STDOUT => OUTPUT_UNIT, &
                  &                        STDERR => ERROR_UNIT, &
                  &                        RK => REAL64
  use mod_unittest_kinds
  implicit none
  private
  public  :: unittest
  public  :: error_stop
!
  character(*), parameter :: SEP1 = "# "//REPEAT('-', 62)
  character(*), parameter :: SEP2 = "# "//REPEAT('=', 62)
  include "constants.f90"
!
  type timestamp
    sequence
    integer(INT64) :: time
    real(RK)       :: ctime
  end type timestamp
!
  type test_result
    sequence
    integer :: id
    logical :: err
  end type test_result
!
#:set asse = [[""], LOGICAL_KIND_TYPE_POSTS, RANK_SCALAR]
#:set bool = [["true", "false"], LOGICAL_KIND_TYPE_POSTS, RANK_ITERi]
#:set equal = [["equal", "not_equal"], INTEGER_KIND_TYPE_POSTS + LOGICAL_KIND_TYPE_POSTS, RANK_ITERii]
#:set almost_equal = [["almost_equal", "not_almost_equal"], INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS, RANK_ITERii]
#:set compare = [["less", "less_equal", "greater", "greater_equal"], INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS, RANK_ITERii]
#:set is_eye = [["is_eye"], INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS, RANK_MATRIX]
#:set is_symmetric = [["is_symmetric"], INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS, RANK_MATRIX]
#:set is_zero = [["is_zero"], INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS, RANK_ITERi]
#:set allclose = [["allclose", "not_allclose"], REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS, RANK_ITERii]
#:set procs = [asse, bool, equal, almost_equal, compare, is_eye, is_symmetric, is_zero, allclose]
  type unittest
    private
    integer                        :: dev
    integer                        :: verbose
    integer                        :: dump_line_limit
    character(:), allocatable      :: script_name
    character(:), allocatable      :: section
    type(test_result), allocatable :: results(:)
    type(timestamp), allocatable   :: times(:)
    logical                        :: terminate_with_error_code
    logical                        :: tap_support
  contains
    procedure         :: init => utest_init
#:for routines, ktp, rank in procs
#:for routine in routines
${generic_procedure(routine, ktp, rank)}$
#:endfor
#:endfor
    procedure         :: finish => utest_finish
    procedure         :: finish_and_terminate => utest_finish_and_terminate
    final             :: utest_destroy
  end type unittest
!
  interface unittest
    module procedure :: utest_new
  end interface unittest
!
  interface
    module subroutine error_stop(msg, code)
      character(*), intent(in), optional :: msg
      integer, intent(in), optional      :: code
    end subroutine error_stop
!
#:def arg_type_bool(type, rank1)
      class(unittest), intent(inout)     :: this
      ${type}$, intent(in)               :: expr${rank_suffix(rank1)}$
      character(*), intent(in), optional :: unitname
      logical, intent(out), optional     :: is_failed
#:enddef
#:def arg_type_ab(type, rank1, rank2=None)
      class(unittest), intent(inout)     :: this
        ${type}$, intent(in)               :: a${rank_suffix(rank1)}$${"" if rank2 is None else ", b"+rank_suffix(rank2)}$
      character(*), intent(in), optional :: unitname
      logical, intent(out), optional     :: is_failed
#:enddef
#:def arg_type_matrix(type)
      class(unittest), intent(inout)     :: this
      ${type}$, intent(in)               :: a${rank_suffix(2)}$
      character(*), intent(in), optional :: unitname
      logical, intent(out), optional     :: is_failed
#:enddef
#:for kind, type, post in LOGICAL_KIND_TYPE_POSTS
  module subroutine ${routine_name("", post, 0)}$ (this, expr, unitname, is_failed)
${arg_type_bool(type, 0)}$
  end subroutine ${routine_name("", post, 0)}$
#:endfor
#:for routine in ["true", "false"]
#:for kind, type, post in LOGICAL_KIND_TYPE_POSTS
#:for rank1, rank2 in RANK_ITERi
    module subroutine ${routine_name(routine, post, rank1)}$ (this, expr, unitname, is_failed)
${arg_type_bool(type, rank1)}$
    end subroutine ${routine_name(routine, post, rank1)}$
#:endfor
#:endfor
#:endfor
#:for routine in ["equal", "not_equal"]
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + LOGICAL_KIND_TYPE_POSTS
#:for rank1, rank2 in RANK_ITERii
    module subroutine ${routine_name(routine, post, rank1, rank2)}$ (this, a, b, unitname, is_failed)
${arg_type_ab(type, rank1, rank2)}$
    end subroutine ${routine_name(routine, post, rank1, rank2)}$
!
#:endfor
#:endfor
#:endfor
#:for routine in ["almost_equal", "not_almost_equal"]
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS
#:for rank1, rank2 in RANK_ITERii
    module subroutine ${routine_name(routine, post, rank1, rank2)}$ (this, a, b, unitname, place, is_failed)
${arg_type_ab(type, rank1, rank2)}$
      integer, intent(in), optional      :: place
    end subroutine ${routine_name(routine, post, rank1, rank2)}$
!
#:endfor
#:endfor
#:endfor
#:for routine in ["less", "less_equal", "greater", "greater_equal"]
#:for rank1, rank2 in RANK_ITERii
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS
    module subroutine ${routine_name(routine, post, rank1, rank2)}$ (this, a, b, unitname, is_failed)
${arg_type_ab(type, rank1, rank2)}$
    end subroutine ${routine_name(routine, post, rank1, rank2)}$
!
#:endfor
#:endfor
#:endfor
#:for routine in ["is_eye"]
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS
    module subroutine ${routine_name(routine, post, 2)}$ (this, a, unitname, place, is_failed)
${arg_type_matrix(type)}$
      integer, intent(in), optional      :: place
    end subroutine ${routine_name(routine, post, 2)}$
!
#:endfor
#:endfor
#:for routine in ["is_symmetric"]
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS
    module subroutine ${routine_name(routine, post, 2)}$ (this, a, unitname, place, is_failed)
${arg_type_matrix(type)}$
      integer, intent(in), optional      :: place
    end subroutine ${routine_name(routine, post, 2)}$
!
#:endfor
#:endfor
#:for routine in ["is_zero"]
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS
#:for rank1, rank2 in RANK_ITERi
    module subroutine ${routine_name(routine, post, rank1)}$ (this, a, unitname, place, is_failed)
${arg_type_ab(type, rank1)}$
      integer, intent(in), optional      :: place
    end subroutine ${routine_name(routine, post, rank1)}$
!
#:endfor
#:endfor
#:endfor
#:for routine in ["allclose", "not_allclose"]
#:for kind, type, post in REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS
#:for rank1, rank2 in RANK_ITERii
    module subroutine ${routine_name(routine, post, rank1, rank2)}$ (this, a, b, unitname, is_failed, rtol, atol)
${arg_type_ab(type, rank1, rank2)}$
      real(${kind}$), intent(in), optional :: rtol
      real(${kind}$), intent(in), optional :: atol
    end subroutine ${routine_name(routine, post, rank1, rank2)}$
!
#:endfor
#:endfor
#:endfor
  end interface
!
contains
  function utest_new(section, terminate_with_error_code, dump_line_limit, tap_support, argparse) result(res)
    character(*), intent(in), optional :: section
    logical, intent(in), optional      :: terminate_with_error_code
    integer, intent(in), optional      :: dump_line_limit
    logical, intent(in), optional      :: tap_support
    logical, intent(in), optional      :: argparse
    type(unittest)                     :: res
    call utest_init(res, section, terminate_with_error_code, dump_line_limit, tap_support, argparse)
  end function utest_new
!
  subroutine utest_init(this, section, terminate_with_error_code, dump_line_limit, tap_support, argparse)
    class(unittest), intent(inout)     :: this
    character(*), intent(in), optional :: section
    logical, intent(in), optional      :: terminate_with_error_code
    integer, intent(in), optional      :: dump_line_limit
    logical, intent(in), optional      :: tap_support
    logical, intent(in), optional      :: argparse
    integer                            :: ios
!
    if (.not. ALLOCATED(this%script_name)) then
      call utest_setup(this, tap_support, argparse)
    end if
!
    if (PRESENT(terminate_with_error_code)) this%terminate_with_error_code = terminate_with_error_code
    if (PRESENT(dump_line_limit)) this%dump_line_limit = dump_line_limit
    this%verbose = MERGE(1, 0, .not.this%tap_support .or. this%dump_line_limit < 0)
!
    call timestamp_append(this%times)
!
    if (ALLOCATED(this%results)) then
      call tap_report_subtests(this)
      this%section = ""
      if (PRESENT(section)) this%section = section
      block
        integer                        :: n
        type(test_result), allocatable :: tmp(:)
        n = SIZE(this%results)
        allocate (tmp(n + 1))
        if (n > 0) tmp(:n) = this%results(:n)
        tmp(n + 1) = test_result(0, .false.)
        call MOVE_ALLOC(from=tmp, to=this%results)
      end block
    else
      ALLOCATE(this%results(1))
      this%results(1) = test_result(0, .false.)
    end if
!
    if (this%tap_support)then
      if (this%section=="") then
        write (STDOUT, '(A)', iostat=ios) "# Subtest: "
      else
        write (STDOUT, '(2A)', iostat=ios) "# Subtest: ", this%section
      end if
    end if
!
    if (this%verbose > 0) then
      write (this%dev, '(A)', err=100) SEP2
      write (this%dev, '(A)', err=100) '# Test command :: '//this%script_name
      if (PRESENT(section)) then
        write (this%dev, '(A)', err=100) SEP1
        write (this%dev, '(A)', err=100) '#   Section ----> '//section
      end if
    end if
!
100 return
  end subroutine utest_init
!
  subroutine utest_setup(this, tap_support, argparse)
    class(unittest), intent(inout)     :: this
    logical, intent(in), optional      :: tap_support
    logical, intent(in), optional      :: argparse
    integer                            :: ios
    this%terminate_with_error_code = .true.
    this%dump_line_limit = 10
    this%dev = STDERR
    this%tap_support = .false.
    if (PRESENT(tap_support)) then
      this%dump_line_limit = 0
      this%tap_support = tap_support
    end if
    call argparse_(this, argparse)
    if (this%tap_support) then
      write (STDOUT, '(A)', iostat=ios) "TAP version 14"
    end if
    if (.not. ALLOCATED(this%section)) this%section = ""
  end subroutine utest_setup
!
  subroutine argparse_(this, argparse)
    class(unittest), intent(inout) :: this
    logical, intent(in), optional  :: argparse
    character(:), allocatable      :: argv
    integer                        :: i, narg, length, ios
    call GET_COMMAND_ARGUMENT(0, length=length, status=ios)
    if (ios > 0) call error_stop('# ARGPARSE FAILED', 1)
    allocate (character(length) :: argv)
    call GET_COMMAND_ARGUMENT(0, value=argv, status=ios)
    if (ios > 0) call error_stop('# ARGPARSE FAILED', 1)
    this%script_name = argv(${"INDEX(argv, " + PATH_SLASH + ", .true.) + 1" if WIN32 or UNIX else "1"}$:)
    if (PRESENT(argparse)) then
      if (.not. argparse) return
    end if
    narg = COMMAND_ARGUMENT_COUNT()
    do i = 1, narg
      call GET_COMMAND_ARGUMENT(i, length = length, status=ios)
      if (ios /= 0) cycle
      if (LEN(argv) < length) argv = REPEAT(" ", length)
      call GET_COMMAND_ARGUMENT(i, argv, status=ios)
      if (ios /= 0) cycle
      select case(argv)
      case("--tap")
        this%dump_line_limit = 0
        this%tap_support = .true.
      end select
    end do
  end subroutine argparse_
!
  subroutine tap_report_subtests(this)
    use mod_unittest_tap14_yaml
    class(unittest), intent(in) :: this
    integer                     :: ntst, nerr
    character(32)               :: csuc, cerr
    integer                     :: ios
    if (.not. this%tap_support) return
    ntst = n_test(this%results)
    nerr = n_error(this%results)
    write (csuc, '(I0)') ntst - nerr
    write (cerr, '(I0)') nerr
    write (STDOUT, '(A,I0)', iostat=ios) "    1..", ntst
    if (nerr > 0) then
      write (STDOUT, '(A)', iostat=ios, ADVANCE="no") "not "
    end if
    if (this%section == "") then
      write (STDOUT, '(A)', iostat=ios) "ok"
    else
      write (STDOUT, '(2A)', iostat=ios) "ok - ", this%section
    end if
    if (nerr < 1) return
    write (STDOUT, '(A)', ADVANCE="NO", IOSTAT=ios) tap14_yaml_document_start(nest=1)
    if (this%section /= "") then
      write (STDOUT, '(A)', ADVANCE="NO", IOSTAT=ios) tap14_yaml_body("name", '"'//this%section//'"', nest=1)
    end if
    write (STDOUT, '(A)', ADVANCE="NO", IOSTAT=ios) tap14_yaml_body("succcess", TRIM(ADJUSTL(csuc)), nest=1)
    write (STDOUT, '(A)', ADVANCE="NO", IOSTAT=ios) tap14_yaml_body("fail", TRIM(ADJUSTL(cerr)), nest=1)
    write (STDOUT, '(A)', ADVANCE="NO", IOSTAT=ios) tap14_yaml_document_end(nest=1)
  end subroutine tap_report_subtests
!
  subroutine tap_report_tests(this)
    use mod_unittest_tap14_yaml
    class(unittest), intent(in) :: this
    integer                     :: nsec
    integer                     :: ios
    if (.not. this%tap_support) return
    nsec = n_section(this%results)
    write (STDOUT, '(A,I0)', iostat=ios) "1..", nsec
  end subroutine tap_report_tests
!
  subroutine utest_finish(this)
    class(unittest), intent(inout) :: this
    real(RK)                       :: cputime, time
    call timestamp_append(this%times)
    time = elappes_time(this%times)
    cputime = elappes_cputime(this%times)
    call tap_report_subtests(this)
    call tap_report_tests(this)
!
    if (this%verbose > 0) then
      if (n_test(this%results) > 0) then
        write (this%dev, '(A)', err=100) SEP1
        write (this%dev, '(A,I0,A,F9.3,A,F9.3,A)', ADVANCE='NO', err=100)    &
     &  '# Run ', n_test(this%results), ' tests in ', time, ' / ', &
     &  cputime, ' s (sys/cpu)'
        if (n_error(this%results) < 1) then
          write (this%dev, '(A,I0,A,F9.3,A)', err=100) ' ----> Passed'
        else
          write (this%dev, '(A,I0,A)', err=100) NEW_LINE('')//'#        ----> ', n_error(this%results), ' error detected.'
        end if
      else
        write (this%dev, '(A)', err=100) '# No Test executed'
      end if
      write (this%dev, '(A)', err=100) SEP2
100   FLUSH (this%dev)
    end if
    call utest_free(this)
  end subroutine utest_finish
!
  subroutine utest_finish_and_terminate(this)
    class(unittest), intent(inout) :: this
    logical                        :: error_terminate
    error_terminate = this%terminate_with_error_code .and. (COUNT(this%results(:)%err) > 0)
    call this%finish()
    if (error_terminate) then
      call error_stop('# TESTS WERE TERMINATED', 1)
    else
      stop
    end if
  end subroutine utest_finish_and_terminate
!
  pure subroutine utest_free(this)
    type(unittest), intent(inout) :: this
    if (ALLOCATED(this%script_name)) deallocate (this%script_name)
    if (ALLOCATED(this%section)) deallocate (this%section)
    if (ALLOCATED(this%times)) deallocate (this%times)
    if (ALLOCATED(this%results)) deallocate (this%results)
    this%terminate_with_error_code = .true.
    this%tap_support = .false.
    this%dump_line_limit = 10
  end subroutine utest_free
!
  subroutine utest_destroy(this)
    type(unittest), intent(inout) :: this
    if (ALLOCATED(this%script_name)) call this%finish()
    call utest_free(this)
  end subroutine utest_destroy
!
! --- private functions
!
  subroutine timestamp_append(times)
    type(timestamp), intent(inout), allocatable :: times(:)
    type(timestamp), allocatable                :: temp(:)
    integer                                      :: n
    if (ALLOCATED(times)) then
      n = SIZE(times)
      allocate (temp(n + 1))
      temp(:n) = times(:)
      call SYSTEM_CLOCK(temp(n + 1)%time)
      call CPU_TIME(temp(n + 1)%ctime)
    else
      allocate (temp(1))
      call SYSTEM_CLOCK(temp(1)%time)
      call CPU_TIME(temp(1)%ctime)
    end if
    call MOVE_ALLOC(from=temp, to=times)
  end subroutine timestamp_append
!
  pure function elappes_time(times) result(res)
    type(timestamp), intent(in) :: times(:)
    real(RK)                    :: res
    integer                     :: n
    n = SIZE(times)
    if (n > 1) then
      if (times(n)%time < times(n - 1)%time) then
        res = real(COUNT_MAX + times(n)%time - times(n - 1)%time + 1, RK) * COUNT_RATE
      else
        res = real(times(n)%time - times(n - 1)%time, RK) * COUNT_RATE
      end if
    else
      res = 0.0_RK
    end if
  end function elappes_time
!
  pure function elappes_cputime(times) result(res)
    type(timestamp), intent(in) :: times(:)
    real(RK)                     :: res
    integer                      :: n
    n = SIZE(times)
    if (n > 1) then
      res = times(n)%ctime - times(n - 1)%ctime
    else
      res = 0.0_RK
    end if
  end function elappes_cputime
!
  pure function n_test(results) result(res)
    type(test_result), intent(in) :: results(:)
    integer                       :: n, res
    n = SIZE(results)
    res = results(n)%id
  end function n_test
!
  pure function n_error(results) result(res)
    type(test_result), intent(in) :: results(:)
    integer                       :: l, u, res
    u = SIZE(results)
    l = u - results(u)%id + 1
    res = COUNT(results(l:u)%err)
  end function n_error
!
  pure function n_section(results) result(res)
    type(test_result), intent(in) :: results(:)
    integer                       :: res
    res = COUNT(results%id == 0)
  end function n_section
!
end module mod_unittest

