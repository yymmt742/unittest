#:include "common.fypp"
#:def error_list_scalar(fm, neq)
      block
        integer  :: ios
        write (this%dev, '${fm}$', IOSTAT=ios)  " [", a, "] ${neq}$ [", b, "]"
      end block
#:enddef
#:def error_list_loop(op, rank1, rank2, fm, neq)
      block
        integer  :: ${', '.join(["ios, nerror"] + ["i"+str(i) for i in range(1,rank1+1)])}$
        nerror = 0
#:for i in range(rank1,0,-1)
        do i${i}$ = 1, SIZE(a, ${i}$)
#:endfor
          if (a${counter_suffix(rank1)}$ ${op}$ b${counter_suffix(rank2)}$) cycle
          nerror = nerror + 1
          write (this%dev, '(*(I6))', IOSTAT=ios, ADVANCE='NO') ${', '.join(["i"+str(i) for i in range(1,rank1+1)])}$
          write (this%dev, '${fm}$', IOSTAT=ios)  " [", a${counter_suffix(rank1)}$, "] ${neq}$ [", b${counter_suffix(rank2)}$, "]"
#:for i in range(rank1)
        enddo
#:endfor
        call report_error_rate(this%dev, SIZE(a), nerror)
      end block
#:enddef
submodule(mod_unittest) equal
  use mod_unittest_printer
  implicit none
contains
#:def error_rate(type)
$:"MERGE(1.0_RK,-1.0_RK,a)" if "logical" in type else "REAL(a - b, RK)"
#:enddef
#:set routines = ["assert_equal", "assert_not_equal"]
#:set ktps = [INTEGER_KIND_TYPE_POSTS, LOGICAL_KIND_TYPE_POSTS]
#:set oplists = [["==", ".ne."], [".eqv.", ".neqv."]]
#:set neqlists = [["!=", "=="], ["noteq", "equiv"]]
#:set fmts = ["(A,1X,I0,1X,A,1X,I0,1X,A)", "(A,1X,L,1X,A,1X,L,1X,A)"]
#:for ktp, oplist, neqlist, fm in zip(ktps, oplists, neqlists, fmts)
#:for kind, type, post in ktp
#:for routine, op, neq, no in zip(routines, oplist, neqlist, [".not.", ""])
#:for rank1, rank2 in RANK_ITERii
  module procedure ${routine_name(routine, post, rank1, rank2)}$
    logical :: err
${common_check(rank1, rank2)}$
    err = ${no}$${"ALL" if rank1>0 else ""}$(a ${op}$ b)
    call report_result(this%dev, this%num_test, err, unitname)
    if (err) then
      this%num_error = this%num_error + 1
${error_list_loop(op, rank1, rank2, fm, neq) if rank1>0 else error_list_scalar(fm, neq)}$
    end if
  end procedure ${routine_name(routine, post, rank1, rank2)}$
!
#:endfor
#:endfor
#:endfor
#:endfor
end submodule equal
