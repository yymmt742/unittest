#:include "common.fypp"
#:set routines = ["equal", "not_equal"]
#:set ktps = [INTEGER_KIND_TYPE_POSTS, LOGICAL_KIND_TYPE_POSTS]
#:set fmts = [INTEGER_FORMAT, LOGICAL_FORMAT]
#:def success(rank1, rank2, op)
          success = a${counter_suffix(rank1)}$${op}$b${counter_suffix(rank2)}$
#:enddef
#:def error_rate(type, op)
#:if "logical" in type
$:"MERGE(MERGE(1.0_RK,-1.0_RK,a), 0.0_RK, a" + negation(op) + "b)"
#:else
#:if "op" == "=="
$:"REAL(a - b, RK)"
#:else
$:"MERGE(1.0_RK, 0.0_RK, a == b)"
#:endif
#:endif
#:enddef
submodule(mod_unittest) equal
  implicit none
contains
#:include "report_functions.fypp"
#:for ktp, top, fm in zip(ktps, ["==", ".eqv."], fmts)
#:for kind, type, post in ktp
#:for routine, op in zip(routines, [top, negation(top)])
#:for rank1, rank2 in RANK_ITERii
  module procedure ${routine_name(routine, post, rank1, rank2)}$
${common_check(rank1, rank2, routine)}$
    err = ${"ALL" if rank1>0 else ""}$(a ${negation(op)}$ b)
${error_list(routine, op, fm, rank1, rank2, error_rate(type, op), success(rank1, rank2, op))}$
  end procedure ${routine_name(routine, post, rank1, rank2)}$
!
#:endfor
#:endfor
#:endfor
#:endfor
include "result_functions.f90"
include "image_functions.f90"
end submodule equal

