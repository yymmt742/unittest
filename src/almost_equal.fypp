#:include "common.fypp"
#:set tors = ["REAL(a - b, RK)", "REAL(a - b, RK)", "REAL(ABS(a - b), RK)"]
#:set fmts = [INTEGER_FORMAT, REAL_FORMAT, COMPLEX_FORMAT]
#:set ktps = [INTEGER_KIND_TYPE_POSTS, REAL_KIND_TYPE_POSTS, COMPLEX_KIND_TYPE_POSTS]
#:set subvar = "        real(RK) :: diff"
#:def success(rank1, rank2, op)
          diff = ABS(${"a" + counter_suffix(rank1) + " - b" + counter_suffix(rank2)}$) * mp
          success = INT(diff) ${"<=" if op == "~" else ">"}$ 1
#:enddef
#:def error_rate(type, op)
#:if op == "~"
${"REAL(ABS(a) - ABS(b), RK)" if "COMPLEX" in type else "REAL(a - b, RK)"}$
#:else
${"MERGE(1.0_RK, 0.0_RK, INT(ABS(a - b) * mp) <= 1)"}$
#:endif
#:enddef
submodule(mod_unittest) almost_equal
  implicit none
  integer, parameter :: DEF_PLACE = 7
contains
#:include "report_functions.fypp"
#:for ktp, fm, tor in zip(ktps, fmts, tors)
#:for kind, type, post in ktp
#:for routine, op, no in zip(["almost_equal", "not_almost_equal"], ["~", "!~"], [".not.", ""])
#:for rank1, rank2 in RANK_ITERii
  module procedure ${routine_name(routine, post, rank1, rank2)}$
  ${"real(RK)" if "INT" in kind else "real("+kind+")"}$ :: mp
${common_check(rank1, rank2, routine)}$
    if (PRESENT(place)) then; mp = 10**place
    else; mp = 10**DEF_PLACE
    end if
    err = ${no}$${"ALL" if rank1>0 else ""}$(INT(mp * ABS(a - b)) < 1)
${error_list(routine, op, fm, rank1, rank2, error_rate(type, op), success(rank1, rank2, op), subvar)}$
  end procedure ${routine_name(routine, post, rank1, rank2)}$
!
#:endfor
#:endfor
#:endfor
#:endfor
include "result_functions.f90"
include "image_functions.f90"
end submodule almost_equal
