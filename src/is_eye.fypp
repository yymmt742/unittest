#:include "common.fypp"
submodule(mod_unittest) is_eye
  use mod_unittest_printer
  implicit none
  integer, parameter :: DEF_MP = 10**7
contains
#:set fmts = ["(A,I14,2X,A,I14,2X,A)", "(A,G16.9,A,G16.9,A)", "(A,2(ES9.2,1X),A,2(ES9.2,1X),A)"]
#:set ktps = [INTEGER_KIND_TYPE_POSTS, REAL_KIND_TYPE_POSTS, COMPLEX_KIND_TYPE_POSTS]
#:for ktp, fm in zip(ktps, fmts)
#:for kind, type, post in ktp
#:for routine, op, neq in zip(["assert_is_eye", "assert_isnot_eye"], ["<", ">="], ["!~", "~ "])
  module procedure ${routine_name(routine, post, 2)}$
    type(expr_report)        :: expr(SIZE(a, 1), SIZE(a, 2))
    logical                  :: err
    integer                  :: i, j, s1, s2
    this%num_test = this%num_test + 1
    s1 = SIZE(a, 1)
    s2 = SIZE(a, 2)
    call check_rank(this%dev, this%num_test, s1, s2, unitname, this%num_error, err)
    if (err) return
    do concurrent(i=1:s1,j=1:s2)
      block
        real(RK) :: diff
        ${type}$ :: b
        b = MERGE(1, 0, i==j)
        diff = ABS(a(i, j) - b)
        if (PRESENT(place)) then; diff = diff * 10**place
        else; diff = diff * DEF_MP
        end if
        expr(i, j)%ok = INT(diff) ${op}$ 1
        if (expr(i, j)%ok) then
          expr(i, j)%msg = ""
          expr(i, j)%error_rate = 0.0_RK
        else
          write (expr(i, j)%msg, '${fm}$') "[", a(i, j), "]${neq}$[", b, "]"
          expr(i, j)%error_rate = real(a(i, j) - b, RK)
        end if
      end block
    enddo
    call check_expr_all(this%dev, this%num_test, [expr], &
   &                    unitname, this%num_error, err)
  end procedure ${routine_name(routine, post, 2)}$
!
#:endfor
#:endfor
#:endfor
end submodule is_eye
