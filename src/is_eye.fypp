#:include "common.fypp"
#:set fmts = [INTEGER_FORMAT, REAL_FORMAT, COMPLEX_FORMAT]
#:set ktps = [INTEGER_KIND_TYPE_POSTS, REAL_KIND_TYPE_POSTS, COMPLEX_KIND_TYPE_POSTS]
#:def subvar(type)
        ${type}$ :: error(SIZE(a, 1), SIZE(a, 2))
#:enddef
#:def success(op)
          b = MERGE(1, 0, i1 == i2)
          error(i1, i2) = a(i1, i2) - b
          success = INT(ABS(error(i1, i2)) * mp) < 1
#:enddef
#:def error_rate(type, op)
${"REAL(ABS(error), RK)" if "complex" in type else "REAL(error, RK)"}$
#:enddef
submodule(mod_unittest) is_eye
  implicit none
  integer, parameter :: DEF_PLACE = 7
contains
#:include "report_functions.fypp"
#:for ktp, fm in zip(ktps, fmts)
#:for kind, type, post in ktp
#:for routine, op in zip(["is_eye"], ["~"])
#:for rank1, rank2 in RANK_MATRIX
  module procedure ${routine_name(routine, post, rank1, rank2)}$
    ${"real(RK)" if "INT" in kind else "real("+kind+")"}$ :: mp, diff
    ${type}$ :: b
    integer :: i, j
${common_check(rank1, rank2, routine)}$
    err = SIZE(a, 1) /= SIZE(a, 2)
    if (PRESENT(is_failed)) is_failed = err
    if (err)then
      call test_result_append(this%results, err)
      call report_rank_error(this%dev, this%results(SIZE(this%results))%id, this%nest, &
     &                       [SIZE(a, 1)], [SIZE(a, 2)], this%tap_support, unitname)
      return
    endif
    if (PRESENT(place)) then; mp = 10**place
    else; mp = 10**DEF_PLACE
    end if
    do j = 1, SIZE(a, 2)
      do i = 1, SIZE(a, 1)
        b = MERGE(1, 0, i == j)
        diff = ABS(a(i, j) - b) * mp
        err = INT(diff) >= 1
        if(err) exit
      end do
      if(err) exit
    end do
${error_list(routine, op, fm, rank1, rank2, error_rate(type, op), success(op), subvar(type))}$
  end procedure ${routine_name(routine, post, rank1, rank2)}$
!
#:endfor
#:endfor
#:endfor
#:endfor
include "result_functions.f90"
include "image_functions.f90"
end submodule is_eye

