#:include "common.fypp"
#:set fmts = [REAL_FORMAT, COMPLEX_FORMAT]
#:set ktps = [REAL_KIND_TYPE_POSTS, COMPLEX_KIND_TYPE_POSTS]
#:set subvar = "        real(RK) :: diff"
#:def success(rank1, rank2, op)
          diff = ABS(${"a" + counter_suffix(rank1) + " - b" + counter_suffix(rank2)}$)
          success = diff ${"<=" if op == "~" else ">"}$ tol
#:enddef
#:def error_rate(type, op)
#:if op == "~"
${"REAL(ABS(a) - ABS(b), RK)" if "complex" in type else "REAL(a - b, RK)"}$
#:else
${"MERGE(1.0_RK, 0.0_RK, INT(ABS(a - b)) <= tol)"}$
#:endif
#:enddef
submodule(mod_unittest) allclose
  implicit none
contains
#:include "report_functions.fypp"
#:for ktp, fm, erf_t in zip(ktps, fmts, [0, 1])
#:for kind, type, post in ktp
#:for routine, op, no in zip(["allclose", "not_allclose"], ["~", "!~"], [".not.", ""])
#:for rank1, rank2 in RANK_ITERii
  module procedure ${routine_name(routine, post, rank1, rank2)}$
    real(${kind}$) :: tol
${common_check(rank1, rank2, routine)}$
    if (PRESENT(atol)) then; tol = MAX(atol, 0.0_${kind}$)
    else; tol = 1E-8_${kind}$
    end if
    if (PRESENT(rtol)) then; tol = tol + MAX(rtol, 0.0_${kind}$)
    else; tol = tol + 1E-5_${kind}$ * MAXVAL([ABS(a), ABS(b)])
    end if
    err = ${no}$${"ALL" if rank1>0 else ""}$(ABS(a - b) < tol)
${error_list(routine, op, fm, rank1, rank2, error_rate(type, op), success(rank1, rank2, op), subvar)}$
  end procedure ${routine_name(routine, post, rank1, rank2)}$
!
#:endfor
#:endfor
#:endfor
#:endfor
include "result_functions.f90"
include "image_functions.f90"
end submodule allclose
