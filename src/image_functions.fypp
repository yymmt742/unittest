#:include "common.fypp"
  subroutine report_error_as_image(dev, ndat, nbreak, error_rate)
    integer, intent(in)     :: dev, ndat, nbreak
    real(RK), intent(in)    :: error_rate(ndat)
    character(*), parameter :: SEP3 = ${SEP3}$
    character(*), parameter :: CDIV(21) = ["165", "129", "093", "057", "021", &
                             &             "020", "019", "018", "017", "016", &
                             &             "000", "052", "088", "124", "160", &
                             &             "196", "202", "208", "214", "220", &
                             &             "226"]
    character(*), parameter :: CSEQ(21) = ["232", "233", "234", "235", "236", &
                             &             "237", "238", "239", "240", "241", &
                             &             "242", "243", "244", "245", "246", &
                             &             "247", "248", "249", "251", "253", &
                             &             "255"]
    character(*), parameter :: CSEQ_R(21) = ["255", "253", "251", "249", "248", &
                             &               "247", "246", "245", "244", "243", &
                             &               "242", "241", "240", "239", "238", &
                             &               "237", "236", "235", "234", "233", &
                             &               "232"]
    real(RK)                :: mmax
    mmax = MAXVAL(ABS(error_rate))
    if (ALL(error_rate >= 0.0_RK)) then
      call dump_image(dev, ndat, SIZE(CSEQ), nbreak, error_rate, 0.0_RK, mmax, CSEQ)
    elseif (ALL(error_rate <= 0.0_RK)) then
      call dump_image(dev, ndat, SIZE(CSEQ_R), nbreak, error_rate, -mmax, 0.0_RK, CSEQ_R)
    else
      call dump_image(dev, ndat, SIZE(CDIV), nbreak, error_rate, -mmax, mmax, CDIV)
    end if
  end subroutine report_error_as_image
!
  subroutine dump_image(dev, ndat, nmap, nbreak, dat, mmin, mmax, cmap)
    integer, intent(in)       :: dev, ndat, nmap, nbreak
    real(RK), intent(in)      :: dat(ndat), mmin, mmax
    character(*), intent(in)  :: cmap(nmap)
    character(*), parameter   :: ANSI = ACHAR(INT(z'1b'))//"[37m"
    character(*), parameter   :: RESET = ACHAR(INT(z'1b'))//'[m'
    character(:), allocatable :: cb
    integer                   :: i, j, n, ios
    call colorbar(nmap, cmap, cb)
    write (dev, '(A,4X,G10.2,2A,G10.2)', IOSTAT=ios) "# ", mmin, cb, RESET, mmax
    n = MIN(nbreak, ndat)
    write (dev, '(A,14X,A)', IOSTAT=ios) "# ", ANSI//REPEAT("_", n)//RESET
    do i = 1, ndat, nbreak
      n = MIN(i + nbreak - 1, ndat)
      write (dev, '(A,14X,A)', ADVANCE="NO", IOSTAT=ios) "# ", ANSI
      do j = i, n
        write (dev, '(A)', ADVANCE="NO", IOSTAT=ios) colorpiece(dat(j), mmin, mmax, nmap, cmap)
      end do
      write (dev, '(A,1X,I0,A,I0)', IOSTAT=ios) RESET, i, " - ", n
    end do
  end subroutine dump_image
!
  pure function colorpiece(dat, mmin, mmax, nmap, cmap) result(res)
    real(RK), intent(in)     :: dat, mmin, mmax
    integer, intent(in)      :: nmap
    character(*), intent(in) :: cmap(nmap)
    character(*), parameter  :: ANSI = ACHAR(INT(z'1b'))//"[48;5;"
    character(*), parameter  :: CRES = ANSI//"000m_"
    integer, parameter       :: LRES = LEN(CRES)
    character(LRES)          :: res
    integer                  :: k
    if (mmax - mmin < 1.0E-8_RK) then
      k = nmap
    else
      k = NINT((nmap - 1) / (mmax - mmin) * (dat - mmin)) + 1
    end if
    res = ANSI//cmap(k)//"m_"
  end function colorpiece
!
  pure subroutine colorbar(nmap, cmap, res)
    integer, intent(in)       :: nmap
    character(*), intent(in)  :: cmap(nmap)
    character(:), allocatable, intent(inout) :: res
    character(*), parameter   :: ANSI = ACHAR(INT(z'1b'))//"[37;48;5;"
    integer                   :: i
    res = ""
    do i = 1, nmap
      res = res//ANSI//cmap(i)//"m__"
    end do
  end subroutine colorbar

