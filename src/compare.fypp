#:include "common.fypp"
#:for routine, cond, neq in zip(["assert_less", "assert_less_equal", "assert_greater", "assert_greater_equal"], ["a<b", "a<=b", "a>b", "a>=b"], [">=", ">", "<=", "<"])
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS
  subroutine ${routine_name(routine, post, 0, 0)}$ (this, a, b, unitname)
  use, intrinsic :: ISO_FORTRAN_ENV, only: ${kind}$
  class(unittest), intent(inout) :: this
  ${type}$, intent(in)     :: a, b
  character(*), intent(in)       :: unitname
  logical                        :: err
  integer                        :: ios
    call utest_assert_printer(this, ${cond}$, unitname, err)
    if (err) write (this%dev, '(2A,I16,A,I16,A)', IOSTAT=ios) AssertionError, ' xxx [', a, '] ${neq}$ [', b, ']'
  end subroutine ${routine_name(routine, post, 0, 0)}$

#:endfor
#:endfor
#:for routine, cond, neq in zip(["assert_less", "assert_less_equal", "assert_greater", "assert_greater_equal"], ["ALL(a<b)", "ALL(a<=b)", "ALL(a>b)", "ALL(a>=b)"], [">=", ">", "<=", "<"])
#:for rank1, rank2, size in [(0, 1, "SIZE(b)"), (1, 0, "SIZE(a)"), (1, 1, "MIN(SIZE(a), SIZE(b))")]
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS
  subroutine ${routine_name(routine, post, rank1, rank2)}$ (this, a, b, unitname)
    use, intrinsic :: ISO_FORTRAN_ENV, only: ${kind}$
    class(unittest), intent(inout) :: this
    ${type}$, intent(in)     :: a${rank_suffix(rank1)}$, b${rank_suffix(rank2)}$
    character(*), intent(in)       :: unitname
    logical                        :: err
    integer                        :: i, ios, nerr
    call utest_assert_printer(this, ${cond}$, unitname, err)
    if (err) then
      write (this%dev, '(2A)', IOSTAT=ios) AssertionError, 'LHS == RHS'
      nerr = 0
      do i = 1, ${size}$
        if (a${counter_suffix(rank1)}$ ${neq}$ b${counter_suffix(rank2)}$)then
          nerr = nerr + 1
          write (this%dev, '(6X,i8,A,I16,A,I16,A)', IOSTAT=ios) i, '  xxx [', a${counter_suffix(rank1)}$, '] ${neq}$ [', b${counter_suffix(rank2)}$, ']'
          if (ios > 0) exit
        endif
      end do
      call utest_error_rate_printer(${size}$, nerr)
    end if
  end subroutine ${routine_name(routine, post, rank1, rank2)}$

#:endfor
#:endfor
#:endfor
