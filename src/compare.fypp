#:include "common.fypp"
submodule(mod_unittest) compare
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS
  use, intrinsic :: ISO_FORTRAN_ENV, only: ${kind}$
#:endfor
  use mod_unittest_printer
  implicit none
contains
#:set routines = ["assert_less", "assert_less_equal", "assert_greater", "assert_greater_equal"]
#:set ops = ["<", "<=", ">", ">="]
#:set neqs = [">=", "> ", "<=", "< "]
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS
#:for rank2 in [0, 1]
#:for rank1 in [0, 1]
#:for routine, expr, neq in zip(routines, ["a<b", "a<=b", "a>b", "a>=b"], [">=", ">", "<=", "<"])
  module procedure ${routine_name(routine, post, rank1, rank2)}$
    logical :: err
${rank_check(rank1, rank2)}$
    call check_expr_all(this%dev, this%num_test, [${routine}$_${post}$(a, b)], unitname, this%num_error, err)
  end procedure ${routine_name(routine, post, rank1, rank2)}$
!
#:endfor
#:endfor
#:endfor
#:endfor
#:for routine, op, neq, rate in zip(routines, ops, neqs, ["a - b", "a - b", "b - a", "b - a"])
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS
  pure elemental function ${routine}$_${post}$(a, b) result(res)
    ${type}$, intent(in) :: a, b
    type(expr_report)             :: res
    res%ok = a ${op}$ b
    if(res%ok) then
      res%msg = ""
      res%error_rate = 0.0_RK
    else
      write(res%msg, '(A,I14,A,I14,A)') "[", a, "  ]${neq}$[", b, "  ]"
      res%error_rate = ${rate}$
    end if
  end function ${routine}$_${post}$
!
#:endfor
#:for kind, type, post in REAL_KIND_TYPE_POSTS
  pure elemental function ${routine}$_${post}$(a, b) result(res)
    ${type}$, intent(in) :: a, b
    type(expr_report)             :: res
    res%ok = a ${op}$ b
    if(res%ok) then
      res%msg = ""
      res%error_rate = 0.0_RK
    else
      write(res%msg, '(A,G16.9,A,G16.9,A)') "[", a, "]${neq}$[", b, "]"
      res%error_rate = ${rate}$
    end if
  end function ${routine}$_${post}$
!
#:endfor
#:endfor
end submodule compare
