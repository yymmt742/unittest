#:include "common.fypp"
submodule(mod_unittest) compare
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS
  use, intrinsic :: ISO_FORTRAN_ENV, only: ${kind}$
#:endfor
  use mod_unittest_printer
  implicit none
contains
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS
#:set routines = ["assert_less", "assert_less_equal", "assert_greater", "assert_greater_equal"]
#:for rank2 in [0, 1]
#:for rank1 in [0, 1]
#:for routine, expr, neq in zip(routines, ["a<b", "a<=b", "a>b", "a>=b"], [">=", ">", "<=", "<"])
  module procedure ${routine_name(routine, post, rank1, rank2)}$
    logical :: err
${rank_check(rank1, rank2)}$
    call check_expr_all(this%dev, this%num_test, [${expr}$], unitname, this%num_error, err)
    if (err) call report_summary(this%dev, [${expr}$], [MERGE(0.0_RK, REAL(ABS(a-b), RK), ${expr}$)])
  end procedure ${routine_name(routine, post, rank1, rank2)}$
!
#:endfor
#:endfor
#:endfor
#:endfor
end submodule compare
