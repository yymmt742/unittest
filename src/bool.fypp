#:include "common.fypp"
#:def success(rank1, op)
          success = ${op + "expr" + counter_suffix(rank1)}$
#:enddef
#:def error_rate(op)
${"MERGE(1.0_RK, 0.0_RK, " + op + "expr)"}$
#:enddef
submodule(mod_unittest) bool
  implicit none
contains
#:include "report_functions.fypp"
#:for routine, op, rank in zip(["", "true", "false"], ["", "", ".not."], [RANK_SCALAR, RANK_ITERi, RANK_ITERi])
#:for kind, type, post in LOGICAL_KIND_TYPE_POSTS
#:for rank1, rank2 in rank
  module procedure ${routine_name(routine, post, rank1)}$
${common_check(rank1, rank2, routine)}$
    err = ${".not.ALL("+op+"expr)" if rank1>0 else negation(op)+"expr"}$
${error_list(routine, op, "A,L,A", rank1, rank2, error_rate(op), success(rank1, op), vname_a="expr")}$
  end procedure ${routine_name(routine, post, rank1)}$
!
#:endfor
#:endfor
#:endfor
include "result_functions.f90"
include "image_functions.f90"
end submodule bool

