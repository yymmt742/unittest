#:include "common.fypp"
#:set tors = ["REAL(a, RK)", "REAL(a, RK)", "REAL(ABS(a), RK)"]
#:set fmts = [INTEGER_FORMAT, REAL_FORMAT, COMPLEX_FORMAT]
#:set ktps = [INTEGER_KIND_TYPE_POSTS, REAL_KIND_TYPE_POSTS, COMPLEX_KIND_TYPE_POSTS]
#:def success(rank1)
          success = INT(ABS(a${counter_suffix(rank1)}$) * mp) < 1
#:enddef
#:def error_rate(type)
${"REAL(ABS(a), RK)" if "complex" in type else "REAL(a, RK)"}$
#:enddef
submodule(mod_unittest) is_zero
  implicit none
  integer, parameter :: DEF_PLACE = 7
contains
#:include "report_functions.fypp"
#:for ktp, fm, tor in zip(ktps, fmts, tors)
#:for kind, type, post in ktp
#:for routine, op in zip(["is_zero"], ["~"])
#:for rank1, rank2 in RANK_ITERi
  module procedure ${routine_name(routine, post, rank1)}$
    ${"real(RK)" if "INT" in kind else "real("+kind+")"}$ :: mp
${common_check(rank1, rank2, routine)}$
    if (PRESENT(place)) then; mp = 10**place
    else; mp = 10**DEF_PLACE
    end if
    err = .not.${"ALL((mp * ABS(a)) < 1)" if rank1>0 else "((mp * ABS(a)) < 1)"}$
${error_list(routine, op, fm, rank1, rank2, error_rate(type), success(rank1))}$
  end procedure ${routine_name(routine, post, rank1)}$
!
#:endfor
#:endfor
#:endfor
#:endfor
include "result_functions.f90"
include "image_functions.f90"
end submodule is_zero

