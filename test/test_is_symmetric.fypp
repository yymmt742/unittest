#:include "common.fypp"
#:set routine = "test_is_symmetric_"
program main
  use mod_unittest
  use mod_unittest_kinds
  implicit none
  type(unittest) :: u
!
#:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS
  call ${routine + post}$(u)
#:endfor
!
  call u%finish_and_terminate()
!
contains
#:for ktp in [INTEGER_KIND_TYPE_POSTS, REAL_KIND_TYPE_POSTS, COMPLEX_KIND_TYPE_POSTS]
#:for kind, type, post in ktp
  subroutine ${routine + post}$(u)
    type(unittest), intent(inout) :: u
    ${type}$, parameter :: i2(4, 4) = RESHAPE([0, 1, 2, 3, 4, 3, 2, 1, 1, 3, 4, 2, 4, 3, 2, 1], [4, 4])
    ${type}$, parameter :: j2(4, 4) = RESHAPE([0, 1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 5, 3, 4, 5, 6], [4, 4])
    logical :: is_failed
!<&
    call u%init('is_symmetric ${post}$', terminate_with_error_code=.false.)
!
    call u%assert_is_symmetric(i2, 'is_symmetric ${post}$', is_failed=is_failed)
    if (.not.is_failed) call error_stop(code=1)
    call u%assert_is_symmetric(j2, 'is_symmetric ${post}$', is_failed=is_failed)
    if (is_failed) call error_stop(code=1)
    call u%assert_isnot_symmetric(j2, 'isnot_symmetric ${post}$', is_failed=is_failed)
    if (.not.is_failed) call error_stop(code=1)
    call u%assert_isnot_symmetric(i2, 'isnot_symmetric ${post}$', is_failed=is_failed)
    if (is_failed) call error_stop(code=1)
!
!&>
  end subroutine ${routine + post}$
!
#:endfor
#:endfor
end program main
