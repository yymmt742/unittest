var tipuesearch = {"pages":[{"title":" unittest ","text":"unittest Fortran unittest project page Bug Todo Developer Info yymmt742","tags":"home","loc":"index.html"},{"title":"unittest â€“ unittest ","text":"type, public :: unittest Contents Constructor unittest Finalization Procedures utest_destroy Type-Bound Procedures assert assert_allclose assert_almost_equal assert_equal assert_false assert_greater assert_greater_equal assert_is_eye assert_is_zero assert_isnot_eye assert_isnot_zero assert_less assert_less_equal assert_not_allclose assert_not_almost_equal assert_not_equal assert_true finish finish_and_terminate init Source Code unittest Constructor public interface unittest private function utest_new(section, terminate_with_error_code) result(res) Arguments Type Intent Optional Attributes Name character, intent(in), optional :: section logical, intent(in), optional :: terminate_with_error_code Return Value type( unittest ) Finalization Procedures final :: utest_destroy private subroutine utest_destroy(this) Arguments Type Intent Optional Attributes Name type( unittest ), intent(inout) :: this Type-Bound Procedures generic, public :: assert => unittest_assert_logical_0, unittest_assert_logical_1, unittest_assert_logical_2, unittest_assert_logical_3 private interface unittest_assert_logical_0() Arguments None private interface unittest_assert_logical_1() Arguments None private interface unittest_assert_logical_2() Arguments None private interface unittest_assert_logical_3() Arguments None generic, public :: assert_allclose => unittest_assert_allclose_r32_00, unittest_assert_allclose_r64_00, unittest_assert_allclose_c32_00, unittest_assert_allclose_c64_00, unittest_assert_allclose_r32_11, unittest_assert_allclose_r64_11, unittest_assert_allclose_c32_11, unittest_assert_allclose_c64_11, unittest_assert_allclose_r32_22, unittest_assert_allclose_r64_22, unittest_assert_allclose_c32_22, unittest_assert_allclose_c64_22, unittest_assert_allclose_r32_33, unittest_assert_allclose_r64_33, unittest_assert_allclose_c32_33, unittest_assert_allclose_c64_33, unittest_assert_allclose_r32_44, unittest_assert_allclose_r64_44, unittest_assert_allclose_c32_44, unittest_assert_allclose_c64_44, unittest_assert_allclose_r32_01, unittest_assert_allclose_r64_01, unittest_assert_allclose_c32_01, unittest_assert_allclose_c64_01, unittest_assert_allclose_r32_02, unittest_assert_allclose_r64_02, unittest_assert_allclose_c32_02, unittest_assert_allclose_c64_02, unittest_assert_allclose_r32_03, unittest_assert_allclose_r64_03, unittest_assert_allclose_c32_03, unittest_assert_allclose_c64_03, unittest_assert_allclose_r32_04, unittest_assert_allclose_r64_04, unittest_assert_allclose_c32_04, unittest_assert_allclose_c64_04, unittest_assert_allclose_r32_10, unittest_assert_allclose_r64_10, unittest_assert_allclose_c32_10, unittest_assert_allclose_c64_10, unittest_assert_allclose_r32_20, unittest_assert_allclose_r64_20, unittest_assert_allclose_c32_20, unittest_assert_allclose_c64_20, unittest_assert_allclose_r32_30, unittest_assert_allclose_r64_30, unittest_assert_allclose_c32_30, unittest_assert_allclose_c64_30, unittest_assert_allclose_r32_40, unittest_assert_allclose_r64_40, unittest_assert_allclose_c32_40, unittest_assert_allclose_c64_40 private interface unittest_assert_allclose_r32_00() Arguments None private interface unittest_assert_allclose_r64_00() Arguments None private interface unittest_assert_allclose_c32_00() Arguments None private interface unittest_assert_allclose_c64_00() Arguments None private interface unittest_assert_allclose_r32_11() Arguments None private interface unittest_assert_allclose_r64_11() Arguments None private interface unittest_assert_allclose_c32_11() Arguments None private interface unittest_assert_allclose_c64_11() Arguments None private interface unittest_assert_allclose_r32_22() Arguments None private interface unittest_assert_allclose_r64_22() Arguments None private interface unittest_assert_allclose_c32_22() Arguments None private interface unittest_assert_allclose_c64_22() Arguments None private interface unittest_assert_allclose_r32_33() Arguments None private interface unittest_assert_allclose_r64_33() Arguments None private interface unittest_assert_allclose_c32_33() Arguments None private interface unittest_assert_allclose_c64_33() Arguments None private interface unittest_assert_allclose_r32_44() Arguments None private interface unittest_assert_allclose_r64_44() Arguments None private interface unittest_assert_allclose_c32_44() Arguments None private interface unittest_assert_allclose_c64_44() Arguments None private interface unittest_assert_allclose_r32_01() Arguments None private interface unittest_assert_allclose_r64_01() Arguments None private interface unittest_assert_allclose_c32_01() Arguments None private interface unittest_assert_allclose_c64_01() Arguments None private interface unittest_assert_allclose_r32_02() Arguments None private interface unittest_assert_allclose_r64_02() Arguments None private interface unittest_assert_allclose_c32_02() Arguments None private interface unittest_assert_allclose_c64_02() Arguments None private interface unittest_assert_allclose_r32_03() Arguments None private interface unittest_assert_allclose_r64_03() Arguments None private interface unittest_assert_allclose_c32_03() Arguments None private interface unittest_assert_allclose_c64_03() Arguments None private interface unittest_assert_allclose_r32_04() Arguments None private interface unittest_assert_allclose_r64_04() Arguments None private interface unittest_assert_allclose_c32_04() Arguments None private interface unittest_assert_allclose_c64_04() Arguments None private interface unittest_assert_allclose_r32_10() Arguments None private interface unittest_assert_allclose_r64_10() Arguments None private interface unittest_assert_allclose_c32_10() Arguments None private interface unittest_assert_allclose_c64_10() Arguments None private interface unittest_assert_allclose_r32_20() Arguments None private interface unittest_assert_allclose_r64_20() Arguments None private interface unittest_assert_allclose_c32_20() Arguments None private interface unittest_assert_allclose_c64_20() Arguments None private interface unittest_assert_allclose_r32_30() Arguments None private interface unittest_assert_allclose_r64_30() Arguments None private interface unittest_assert_allclose_c32_30() Arguments None private interface unittest_assert_allclose_c64_30() Arguments None private interface unittest_assert_allclose_r32_40() Arguments None private interface unittest_assert_allclose_r64_40() Arguments None private interface unittest_assert_allclose_c32_40() Arguments None private interface unittest_assert_allclose_c64_40() Arguments None generic, public :: assert_almost_equal => unittest_assert_almost_equal_i8_00, unittest_assert_almost_equal_i16_00, unittest_assert_almost_equal_i32_00, unittest_assert_almost_equal_i64_00, unittest_assert_almost_equal_r32_00, unittest_assert_almost_equal_r64_00, unittest_assert_almost_equal_c32_00, unittest_assert_almost_equal_c64_00, unittest_assert_almost_equal_i8_11, unittest_assert_almost_equal_i16_11, unittest_assert_almost_equal_i32_11, unittest_assert_almost_equal_i64_11, unittest_assert_almost_equal_r32_11, unittest_assert_almost_equal_r64_11, unittest_assert_almost_equal_c32_11, unittest_assert_almost_equal_c64_11, unittest_assert_almost_equal_i8_22, unittest_assert_almost_equal_i16_22, unittest_assert_almost_equal_i32_22, unittest_assert_almost_equal_i64_22, unittest_assert_almost_equal_r32_22, unittest_assert_almost_equal_r64_22, unittest_assert_almost_equal_c32_22, unittest_assert_almost_equal_c64_22, unittest_assert_almost_equal_i8_33, unittest_assert_almost_equal_i16_33, unittest_assert_almost_equal_i32_33, unittest_assert_almost_equal_i64_33, unittest_assert_almost_equal_r32_33, unittest_assert_almost_equal_r64_33, unittest_assert_almost_equal_c32_33, unittest_assert_almost_equal_c64_33, unittest_assert_almost_equal_i8_44, unittest_assert_almost_equal_i16_44, unittest_assert_almost_equal_i32_44, unittest_assert_almost_equal_i64_44, unittest_assert_almost_equal_r32_44, unittest_assert_almost_equal_r64_44, unittest_assert_almost_equal_c32_44, unittest_assert_almost_equal_c64_44, unittest_assert_almost_equal_i8_01, unittest_assert_almost_equal_i16_01, unittest_assert_almost_equal_i32_01, unittest_assert_almost_equal_i64_01, unittest_assert_almost_equal_r32_01, unittest_assert_almost_equal_r64_01, unittest_assert_almost_equal_c32_01, unittest_assert_almost_equal_c64_01, unittest_assert_almost_equal_i8_02, unittest_assert_almost_equal_i16_02, unittest_assert_almost_equal_i32_02, unittest_assert_almost_equal_i64_02, unittest_assert_almost_equal_r32_02, unittest_assert_almost_equal_r64_02, unittest_assert_almost_equal_c32_02, unittest_assert_almost_equal_c64_02, unittest_assert_almost_equal_i8_03, unittest_assert_almost_equal_i16_03, unittest_assert_almost_equal_i32_03, unittest_assert_almost_equal_i64_03, unittest_assert_almost_equal_r32_03, unittest_assert_almost_equal_r64_03, unittest_assert_almost_equal_c32_03, unittest_assert_almost_equal_c64_03, unittest_assert_almost_equal_i8_04, unittest_assert_almost_equal_i16_04, unittest_assert_almost_equal_i32_04, unittest_assert_almost_equal_i64_04, unittest_assert_almost_equal_r32_04, unittest_assert_almost_equal_r64_04, unittest_assert_almost_equal_c32_04, unittest_assert_almost_equal_c64_04, unittest_assert_almost_equal_i8_10, unittest_assert_almost_equal_i16_10, unittest_assert_almost_equal_i32_10, unittest_assert_almost_equal_i64_10, unittest_assert_almost_equal_r32_10, unittest_assert_almost_equal_r64_10, unittest_assert_almost_equal_c32_10, unittest_assert_almost_equal_c64_10, unittest_assert_almost_equal_i8_20, unittest_assert_almost_equal_i16_20, unittest_assert_almost_equal_i32_20, unittest_assert_almost_equal_i64_20, unittest_assert_almost_equal_r32_20, unittest_assert_almost_equal_r64_20, unittest_assert_almost_equal_c32_20, unittest_assert_almost_equal_c64_20, unittest_assert_almost_equal_i8_30, unittest_assert_almost_equal_i16_30, unittest_assert_almost_equal_i32_30, unittest_assert_almost_equal_i64_30, unittest_assert_almost_equal_r32_30, unittest_assert_almost_equal_r64_30, unittest_assert_almost_equal_c32_30, unittest_assert_almost_equal_c64_30, unittest_assert_almost_equal_i8_40, unittest_assert_almost_equal_i16_40, unittest_assert_almost_equal_i32_40, unittest_assert_almost_equal_i64_40, unittest_assert_almost_equal_r32_40, unittest_assert_almost_equal_r64_40, unittest_assert_almost_equal_c32_40, unittest_assert_almost_equal_c64_40 private interface unittest_assert_almost_equal_i8_00() Arguments None private interface unittest_assert_almost_equal_i16_00() Arguments None private interface unittest_assert_almost_equal_i32_00() Arguments None private interface unittest_assert_almost_equal_i64_00() Arguments None private interface unittest_assert_almost_equal_r32_00() Arguments None private interface unittest_assert_almost_equal_r64_00() Arguments None private interface unittest_assert_almost_equal_c32_00() Arguments None private interface unittest_assert_almost_equal_c64_00() Arguments None private interface unittest_assert_almost_equal_i8_11() Arguments None private interface unittest_assert_almost_equal_i16_11() Arguments None private interface unittest_assert_almost_equal_i32_11() Arguments None private interface unittest_assert_almost_equal_i64_11() Arguments None private interface unittest_assert_almost_equal_r32_11() Arguments None private interface unittest_assert_almost_equal_r64_11() Arguments None private interface unittest_assert_almost_equal_c32_11() Arguments None private interface unittest_assert_almost_equal_c64_11() Arguments None private interface unittest_assert_almost_equal_i8_22() Arguments None private interface unittest_assert_almost_equal_i16_22() Arguments None private interface unittest_assert_almost_equal_i32_22() Arguments None private interface unittest_assert_almost_equal_i64_22() Arguments None private interface unittest_assert_almost_equal_r32_22() Arguments None private interface unittest_assert_almost_equal_r64_22() Arguments None private interface unittest_assert_almost_equal_c32_22() Arguments None private interface unittest_assert_almost_equal_c64_22() Arguments None private interface unittest_assert_almost_equal_i8_33() Arguments None private interface unittest_assert_almost_equal_i16_33() Arguments None private interface unittest_assert_almost_equal_i32_33() Arguments None private interface unittest_assert_almost_equal_i64_33() Arguments None private interface unittest_assert_almost_equal_r32_33() Arguments None private interface unittest_assert_almost_equal_r64_33() Arguments None private interface unittest_assert_almost_equal_c32_33() Arguments None private interface unittest_assert_almost_equal_c64_33() Arguments None private interface unittest_assert_almost_equal_i8_44() Arguments None private interface unittest_assert_almost_equal_i16_44() Arguments None private interface unittest_assert_almost_equal_i32_44() Arguments None private interface unittest_assert_almost_equal_i64_44() Arguments None private interface unittest_assert_almost_equal_r32_44() Arguments None private interface unittest_assert_almost_equal_r64_44() Arguments None private interface unittest_assert_almost_equal_c32_44() Arguments None private interface unittest_assert_almost_equal_c64_44() Arguments None private interface unittest_assert_almost_equal_i8_01() Arguments None private interface unittest_assert_almost_equal_i16_01() Arguments None private interface unittest_assert_almost_equal_i32_01() Arguments None private interface unittest_assert_almost_equal_i64_01() Arguments None private interface unittest_assert_almost_equal_r32_01() Arguments None private interface unittest_assert_almost_equal_r64_01() Arguments None private interface unittest_assert_almost_equal_c32_01() Arguments None private interface unittest_assert_almost_equal_c64_01() Arguments None private interface unittest_assert_almost_equal_i8_02() Arguments None private interface unittest_assert_almost_equal_i16_02() Arguments None private interface unittest_assert_almost_equal_i32_02() Arguments None private interface unittest_assert_almost_equal_i64_02() Arguments None private interface unittest_assert_almost_equal_r32_02() Arguments None private interface unittest_assert_almost_equal_r64_02() Arguments None private interface unittest_assert_almost_equal_c32_02() Arguments None private interface unittest_assert_almost_equal_c64_02() Arguments None private interface unittest_assert_almost_equal_i8_03() Arguments None private interface unittest_assert_almost_equal_i16_03() Arguments None private interface unittest_assert_almost_equal_i32_03() Arguments None private interface unittest_assert_almost_equal_i64_03() Arguments None private interface unittest_assert_almost_equal_r32_03() Arguments None private interface unittest_assert_almost_equal_r64_03() Arguments None private interface unittest_assert_almost_equal_c32_03() Arguments None private interface unittest_assert_almost_equal_c64_03() Arguments None private interface unittest_assert_almost_equal_i8_04() Arguments None private interface unittest_assert_almost_equal_i16_04() Arguments None private interface unittest_assert_almost_equal_i32_04() Arguments None private interface unittest_assert_almost_equal_i64_04() Arguments None private interface unittest_assert_almost_equal_r32_04() Arguments None private interface unittest_assert_almost_equal_r64_04() Arguments None private interface unittest_assert_almost_equal_c32_04() Arguments None private interface unittest_assert_almost_equal_c64_04() Arguments None private interface unittest_assert_almost_equal_i8_10() Arguments None private interface unittest_assert_almost_equal_i16_10() Arguments None private interface unittest_assert_almost_equal_i32_10() Arguments None private interface unittest_assert_almost_equal_i64_10() Arguments None private interface unittest_assert_almost_equal_r32_10() Arguments None private interface unittest_assert_almost_equal_r64_10() Arguments None private interface unittest_assert_almost_equal_c32_10() Arguments None private interface unittest_assert_almost_equal_c64_10() Arguments None private interface unittest_assert_almost_equal_i8_20() Arguments None private interface unittest_assert_almost_equal_i16_20() Arguments None private interface unittest_assert_almost_equal_i32_20() Arguments None private interface unittest_assert_almost_equal_i64_20() Arguments None private interface unittest_assert_almost_equal_r32_20() Arguments None private interface unittest_assert_almost_equal_r64_20() Arguments None private interface unittest_assert_almost_equal_c32_20() Arguments None private interface unittest_assert_almost_equal_c64_20() Arguments None private interface unittest_assert_almost_equal_i8_30() Arguments None private interface unittest_assert_almost_equal_i16_30() Arguments None private interface unittest_assert_almost_equal_i32_30() Arguments None private interface unittest_assert_almost_equal_i64_30() Arguments None private interface unittest_assert_almost_equal_r32_30() Arguments None private interface unittest_assert_almost_equal_r64_30() Arguments None private interface unittest_assert_almost_equal_c32_30() Arguments None private interface unittest_assert_almost_equal_c64_30() Arguments None private interface unittest_assert_almost_equal_i8_40() Arguments None private interface unittest_assert_almost_equal_i16_40() Arguments None private interface unittest_assert_almost_equal_i32_40() Arguments None private interface unittest_assert_almost_equal_i64_40() Arguments None private interface unittest_assert_almost_equal_r32_40() Arguments None private interface unittest_assert_almost_equal_r64_40() Arguments None private interface unittest_assert_almost_equal_c32_40() Arguments None private interface unittest_assert_almost_equal_c64_40() Arguments None generic, public :: assert_equal => unittest_assert_equal_i8_00, unittest_assert_equal_i16_00, unittest_assert_equal_i32_00, unittest_assert_equal_i64_00, unittest_assert_equal_logical_00, unittest_assert_equal_i8_11, unittest_assert_equal_i16_11, unittest_assert_equal_i32_11, unittest_assert_equal_i64_11, unittest_assert_equal_logical_11, unittest_assert_equal_i8_22, unittest_assert_equal_i16_22, unittest_assert_equal_i32_22, unittest_assert_equal_i64_22, unittest_assert_equal_logical_22, unittest_assert_equal_i8_33, unittest_assert_equal_i16_33, unittest_assert_equal_i32_33, unittest_assert_equal_i64_33, unittest_assert_equal_logical_33, unittest_assert_equal_i8_44, unittest_assert_equal_i16_44, unittest_assert_equal_i32_44, unittest_assert_equal_i64_44, unittest_assert_equal_logical_44, unittest_assert_equal_i8_01, unittest_assert_equal_i16_01, unittest_assert_equal_i32_01, unittest_assert_equal_i64_01, unittest_assert_equal_logical_01, unittest_assert_equal_i8_02, unittest_assert_equal_i16_02, unittest_assert_equal_i32_02, unittest_assert_equal_i64_02, unittest_assert_equal_logical_02, unittest_assert_equal_i8_03, unittest_assert_equal_i16_03, unittest_assert_equal_i32_03, unittest_assert_equal_i64_03, unittest_assert_equal_logical_03, unittest_assert_equal_i8_04, unittest_assert_equal_i16_04, unittest_assert_equal_i32_04, unittest_assert_equal_i64_04, unittest_assert_equal_logical_04, unittest_assert_equal_i8_10, unittest_assert_equal_i16_10, unittest_assert_equal_i32_10, unittest_assert_equal_i64_10, unittest_assert_equal_logical_10, unittest_assert_equal_i8_20, unittest_assert_equal_i16_20, unittest_assert_equal_i32_20, unittest_assert_equal_i64_20, unittest_assert_equal_logical_20, unittest_assert_equal_i8_30, unittest_assert_equal_i16_30, unittest_assert_equal_i32_30, unittest_assert_equal_i64_30, unittest_assert_equal_logical_30, unittest_assert_equal_i8_40, unittest_assert_equal_i16_40, unittest_assert_equal_i32_40, unittest_assert_equal_i64_40, unittest_assert_equal_logical_40 private interface unittest_assert_equal_i8_00() Arguments None private interface unittest_assert_equal_i16_00() Arguments None private interface unittest_assert_equal_i32_00() Arguments None private interface unittest_assert_equal_i64_00() Arguments None private interface unittest_assert_equal_logical_00() Arguments None private interface unittest_assert_equal_i8_11() Arguments None private interface unittest_assert_equal_i16_11() Arguments None private interface unittest_assert_equal_i32_11() Arguments None private interface unittest_assert_equal_i64_11() Arguments None private interface unittest_assert_equal_logical_11() Arguments None private interface unittest_assert_equal_i8_22() Arguments None private interface unittest_assert_equal_i16_22() Arguments None private interface unittest_assert_equal_i32_22() Arguments None private interface unittest_assert_equal_i64_22() Arguments None private interface unittest_assert_equal_logical_22() Arguments None private interface unittest_assert_equal_i8_33() Arguments None private interface unittest_assert_equal_i16_33() Arguments None private interface unittest_assert_equal_i32_33() Arguments None private interface unittest_assert_equal_i64_33() Arguments None private interface unittest_assert_equal_logical_33() Arguments None private interface unittest_assert_equal_i8_44() Arguments None private interface unittest_assert_equal_i16_44() Arguments None private interface unittest_assert_equal_i32_44() Arguments None private interface unittest_assert_equal_i64_44() Arguments None private interface unittest_assert_equal_logical_44() Arguments None private interface unittest_assert_equal_i8_01() Arguments None private interface unittest_assert_equal_i16_01() Arguments None private interface unittest_assert_equal_i32_01() Arguments None private interface unittest_assert_equal_i64_01() Arguments None private interface unittest_assert_equal_logical_01() Arguments None private interface unittest_assert_equal_i8_02() Arguments None private interface unittest_assert_equal_i16_02() Arguments None private interface unittest_assert_equal_i32_02() Arguments None private interface unittest_assert_equal_i64_02() Arguments None private interface unittest_assert_equal_logical_02() Arguments None private interface unittest_assert_equal_i8_03() Arguments None private interface unittest_assert_equal_i16_03() Arguments None private interface unittest_assert_equal_i32_03() Arguments None private interface unittest_assert_equal_i64_03() Arguments None private interface unittest_assert_equal_logical_03() Arguments None private interface unittest_assert_equal_i8_04() Arguments None private interface unittest_assert_equal_i16_04() Arguments None private interface unittest_assert_equal_i32_04() Arguments None private interface unittest_assert_equal_i64_04() Arguments None private interface unittest_assert_equal_logical_04() Arguments None private interface unittest_assert_equal_i8_10() Arguments None private interface unittest_assert_equal_i16_10() Arguments None private interface unittest_assert_equal_i32_10() Arguments None private interface unittest_assert_equal_i64_10() Arguments None private interface unittest_assert_equal_logical_10() Arguments None private interface unittest_assert_equal_i8_20() Arguments None private interface unittest_assert_equal_i16_20() Arguments None private interface unittest_assert_equal_i32_20() Arguments None private interface unittest_assert_equal_i64_20() Arguments None private interface unittest_assert_equal_logical_20() Arguments None private interface unittest_assert_equal_i8_30() Arguments None private interface unittest_assert_equal_i16_30() Arguments None private interface unittest_assert_equal_i32_30() Arguments None private interface unittest_assert_equal_i64_30() Arguments None private interface unittest_assert_equal_logical_30() Arguments None private interface unittest_assert_equal_i8_40() Arguments None private interface unittest_assert_equal_i16_40() Arguments None private interface unittest_assert_equal_i32_40() Arguments None private interface unittest_assert_equal_i64_40() Arguments None private interface unittest_assert_equal_logical_40() Arguments None generic, public :: assert_false => unittest_assert_false_logical_0, unittest_assert_false_logical_1, unittest_assert_false_logical_2, unittest_assert_false_logical_3 private interface unittest_assert_false_logical_0() Arguments None private interface unittest_assert_false_logical_1() Arguments None private interface unittest_assert_false_logical_2() Arguments None private interface unittest_assert_false_logical_3() Arguments None generic, public :: assert_greater => unittest_assert_greater_i8_00, unittest_assert_greater_i16_00, unittest_assert_greater_i32_00, unittest_assert_greater_i64_00, unittest_assert_greater_r32_00, unittest_assert_greater_r64_00, unittest_assert_greater_i8_01, unittest_assert_greater_i16_01, unittest_assert_greater_i32_01, unittest_assert_greater_i64_01, unittest_assert_greater_r32_01, unittest_assert_greater_r64_01, unittest_assert_greater_i8_10, unittest_assert_greater_i16_10, unittest_assert_greater_i32_10, unittest_assert_greater_i64_10, unittest_assert_greater_r32_10, unittest_assert_greater_r64_10, unittest_assert_greater_i8_11, unittest_assert_greater_i16_11, unittest_assert_greater_i32_11, unittest_assert_greater_i64_11, unittest_assert_greater_r32_11, unittest_assert_greater_r64_11 private interface unittest_assert_greater_i8_00() Arguments None private interface unittest_assert_greater_i16_00() Arguments None private interface unittest_assert_greater_i32_00() Arguments None private interface unittest_assert_greater_i64_00() Arguments None private interface unittest_assert_greater_r32_00() Arguments None private interface unittest_assert_greater_r64_00() Arguments None private interface unittest_assert_greater_i8_01() Arguments None private interface unittest_assert_greater_i16_01() Arguments None private interface unittest_assert_greater_i32_01() Arguments None private interface unittest_assert_greater_i64_01() Arguments None private interface unittest_assert_greater_r32_01() Arguments None private interface unittest_assert_greater_r64_01() Arguments None private interface unittest_assert_greater_i8_10() Arguments None private interface unittest_assert_greater_i16_10() Arguments None private interface unittest_assert_greater_i32_10() Arguments None private interface unittest_assert_greater_i64_10() Arguments None private interface unittest_assert_greater_r32_10() Arguments None private interface unittest_assert_greater_r64_10() Arguments None private interface unittest_assert_greater_i8_11() Arguments None private interface unittest_assert_greater_i16_11() Arguments None private interface unittest_assert_greater_i32_11() Arguments None private interface unittest_assert_greater_i64_11() Arguments None private interface unittest_assert_greater_r32_11() Arguments None private interface unittest_assert_greater_r64_11() Arguments None generic, public :: assert_greater_equal => unittest_assert_greater_equal_i8_00, unittest_assert_greater_equal_i16_00, unittest_assert_greater_equal_i32_00, unittest_assert_greater_equal_i64_00, unittest_assert_greater_equal_r32_00, unittest_assert_greater_equal_r64_00, unittest_assert_greater_equal_i8_01, unittest_assert_greater_equal_i16_01, unittest_assert_greater_equal_i32_01, unittest_assert_greater_equal_i64_01, unittest_assert_greater_equal_r32_01, unittest_assert_greater_equal_r64_01, unittest_assert_greater_equal_i8_10, unittest_assert_greater_equal_i16_10, unittest_assert_greater_equal_i32_10, unittest_assert_greater_equal_i64_10, unittest_assert_greater_equal_r32_10, unittest_assert_greater_equal_r64_10, unittest_assert_greater_equal_i8_11, unittest_assert_greater_equal_i16_11, unittest_assert_greater_equal_i32_11, unittest_assert_greater_equal_i64_11, unittest_assert_greater_equal_r32_11, unittest_assert_greater_equal_r64_11 private interface unittest_assert_greater_equal_i8_00() Arguments None private interface unittest_assert_greater_equal_i16_00() Arguments None private interface unittest_assert_greater_equal_i32_00() Arguments None private interface unittest_assert_greater_equal_i64_00() Arguments None private interface unittest_assert_greater_equal_r32_00() Arguments None private interface unittest_assert_greater_equal_r64_00() Arguments None private interface unittest_assert_greater_equal_i8_01() Arguments None private interface unittest_assert_greater_equal_i16_01() Arguments None private interface unittest_assert_greater_equal_i32_01() Arguments None private interface unittest_assert_greater_equal_i64_01() Arguments None private interface unittest_assert_greater_equal_r32_01() Arguments None private interface unittest_assert_greater_equal_r64_01() Arguments None private interface unittest_assert_greater_equal_i8_10() Arguments None private interface unittest_assert_greater_equal_i16_10() Arguments None private interface unittest_assert_greater_equal_i32_10() Arguments None private interface unittest_assert_greater_equal_i64_10() Arguments None private interface unittest_assert_greater_equal_r32_10() Arguments None private interface unittest_assert_greater_equal_r64_10() Arguments None private interface unittest_assert_greater_equal_i8_11() Arguments None private interface unittest_assert_greater_equal_i16_11() Arguments None private interface unittest_assert_greater_equal_i32_11() Arguments None private interface unittest_assert_greater_equal_i64_11() Arguments None private interface unittest_assert_greater_equal_r32_11() Arguments None private interface unittest_assert_greater_equal_r64_11() Arguments None generic, public :: assert_is_eye => unittest_assert_is_eye_i8_2, unittest_assert_is_eye_i16_2, unittest_assert_is_eye_i32_2, unittest_assert_is_eye_i64_2, unittest_assert_is_eye_r32_2, unittest_assert_is_eye_r64_2, unittest_assert_is_eye_c32_2, unittest_assert_is_eye_c64_2 private interface unittest_assert_is_eye_i8_2() Arguments None private interface unittest_assert_is_eye_i16_2() Arguments None private interface unittest_assert_is_eye_i32_2() Arguments None private interface unittest_assert_is_eye_i64_2() Arguments None private interface unittest_assert_is_eye_r32_2() Arguments None private interface unittest_assert_is_eye_r64_2() Arguments None private interface unittest_assert_is_eye_c32_2() Arguments None private interface unittest_assert_is_eye_c64_2() Arguments None generic, public :: assert_is_zero => unittest_assert_is_zero_i8_0, unittest_assert_is_zero_i16_0, unittest_assert_is_zero_i32_0, unittest_assert_is_zero_i64_0, unittest_assert_is_zero_r32_0, unittest_assert_is_zero_r64_0, unittest_assert_is_zero_c32_0, unittest_assert_is_zero_c64_0, unittest_assert_is_zero_i8_1, unittest_assert_is_zero_i16_1, unittest_assert_is_zero_i32_1, unittest_assert_is_zero_i64_1, unittest_assert_is_zero_r32_1, unittest_assert_is_zero_r64_1, unittest_assert_is_zero_c32_1, unittest_assert_is_zero_c64_1, unittest_assert_is_zero_i8_2, unittest_assert_is_zero_i16_2, unittest_assert_is_zero_i32_2, unittest_assert_is_zero_i64_2, unittest_assert_is_zero_r32_2, unittest_assert_is_zero_r64_2, unittest_assert_is_zero_c32_2, unittest_assert_is_zero_c64_2, unittest_assert_is_zero_i8_3, unittest_assert_is_zero_i16_3, unittest_assert_is_zero_i32_3, unittest_assert_is_zero_i64_3, unittest_assert_is_zero_r32_3, unittest_assert_is_zero_r64_3, unittest_assert_is_zero_c32_3, unittest_assert_is_zero_c64_3 private interface unittest_assert_is_zero_i8_0() Arguments None private interface unittest_assert_is_zero_i16_0() Arguments None private interface unittest_assert_is_zero_i32_0() Arguments None private interface unittest_assert_is_zero_i64_0() Arguments None private interface unittest_assert_is_zero_r32_0() Arguments None private interface unittest_assert_is_zero_r64_0() Arguments None private interface unittest_assert_is_zero_c32_0() Arguments None private interface unittest_assert_is_zero_c64_0() Arguments None private interface unittest_assert_is_zero_i8_1() Arguments None private interface unittest_assert_is_zero_i16_1() Arguments None private interface unittest_assert_is_zero_i32_1() Arguments None private interface unittest_assert_is_zero_i64_1() Arguments None private interface unittest_assert_is_zero_r32_1() Arguments None private interface unittest_assert_is_zero_r64_1() Arguments None private interface unittest_assert_is_zero_c32_1() Arguments None private interface unittest_assert_is_zero_c64_1() Arguments None private interface unittest_assert_is_zero_i8_2() Arguments None private interface unittest_assert_is_zero_i16_2() Arguments None private interface unittest_assert_is_zero_i32_2() Arguments None private interface unittest_assert_is_zero_i64_2() Arguments None private interface unittest_assert_is_zero_r32_2() Arguments None private interface unittest_assert_is_zero_r64_2() Arguments None private interface unittest_assert_is_zero_c32_2() Arguments None private interface unittest_assert_is_zero_c64_2() Arguments None private interface unittest_assert_is_zero_i8_3() Arguments None private interface unittest_assert_is_zero_i16_3() Arguments None private interface unittest_assert_is_zero_i32_3() Arguments None private interface unittest_assert_is_zero_i64_3() Arguments None private interface unittest_assert_is_zero_r32_3() Arguments None private interface unittest_assert_is_zero_r64_3() Arguments None private interface unittest_assert_is_zero_c32_3() Arguments None private interface unittest_assert_is_zero_c64_3() Arguments None generic, public :: assert_isnot_eye => unittest_assert_isnot_eye_i8_2, unittest_assert_isnot_eye_i16_2, unittest_assert_isnot_eye_i32_2, unittest_assert_isnot_eye_i64_2, unittest_assert_isnot_eye_r32_2, unittest_assert_isnot_eye_r64_2, unittest_assert_isnot_eye_c32_2, unittest_assert_isnot_eye_c64_2 private interface unittest_assert_isnot_eye_i8_2() Arguments None private interface unittest_assert_isnot_eye_i16_2() Arguments None private interface unittest_assert_isnot_eye_i32_2() Arguments None private interface unittest_assert_isnot_eye_i64_2() Arguments None private interface unittest_assert_isnot_eye_r32_2() Arguments None private interface unittest_assert_isnot_eye_r64_2() Arguments None private interface unittest_assert_isnot_eye_c32_2() Arguments None private interface unittest_assert_isnot_eye_c64_2() Arguments None generic, public :: assert_isnot_zero => unittest_assert_isnot_zero_i8_0, unittest_assert_isnot_zero_i16_0, unittest_assert_isnot_zero_i32_0, unittest_assert_isnot_zero_i64_0, unittest_assert_isnot_zero_r32_0, unittest_assert_isnot_zero_r64_0, unittest_assert_isnot_zero_c32_0, unittest_assert_isnot_zero_c64_0, unittest_assert_isnot_zero_i8_1, unittest_assert_isnot_zero_i16_1, unittest_assert_isnot_zero_i32_1, unittest_assert_isnot_zero_i64_1, unittest_assert_isnot_zero_r32_1, unittest_assert_isnot_zero_r64_1, unittest_assert_isnot_zero_c32_1, unittest_assert_isnot_zero_c64_1, unittest_assert_isnot_zero_i8_2, unittest_assert_isnot_zero_i16_2, unittest_assert_isnot_zero_i32_2, unittest_assert_isnot_zero_i64_2, unittest_assert_isnot_zero_r32_2, unittest_assert_isnot_zero_r64_2, unittest_assert_isnot_zero_c32_2, unittest_assert_isnot_zero_c64_2, unittest_assert_isnot_zero_i8_3, unittest_assert_isnot_zero_i16_3, unittest_assert_isnot_zero_i32_3, unittest_assert_isnot_zero_i64_3, unittest_assert_isnot_zero_r32_3, unittest_assert_isnot_zero_r64_3, unittest_assert_isnot_zero_c32_3, unittest_assert_isnot_zero_c64_3 private interface unittest_assert_isnot_zero_i8_0() Arguments None private interface unittest_assert_isnot_zero_i16_0() Arguments None private interface unittest_assert_isnot_zero_i32_0() Arguments None private interface unittest_assert_isnot_zero_i64_0() Arguments None private interface unittest_assert_isnot_zero_r32_0() Arguments None private interface unittest_assert_isnot_zero_r64_0() Arguments None private interface unittest_assert_isnot_zero_c32_0() Arguments None private interface unittest_assert_isnot_zero_c64_0() Arguments None private interface unittest_assert_isnot_zero_i8_1() Arguments None private interface unittest_assert_isnot_zero_i16_1() Arguments None private interface unittest_assert_isnot_zero_i32_1() Arguments None private interface unittest_assert_isnot_zero_i64_1() Arguments None private interface unittest_assert_isnot_zero_r32_1() Arguments None private interface unittest_assert_isnot_zero_r64_1() Arguments None private interface unittest_assert_isnot_zero_c32_1() Arguments None private interface unittest_assert_isnot_zero_c64_1() Arguments None private interface unittest_assert_isnot_zero_i8_2() Arguments None private interface unittest_assert_isnot_zero_i16_2() Arguments None private interface unittest_assert_isnot_zero_i32_2() Arguments None private interface unittest_assert_isnot_zero_i64_2() Arguments None private interface unittest_assert_isnot_zero_r32_2() Arguments None private interface unittest_assert_isnot_zero_r64_2() Arguments None private interface unittest_assert_isnot_zero_c32_2() Arguments None private interface unittest_assert_isnot_zero_c64_2() Arguments None private interface unittest_assert_isnot_zero_i8_3() Arguments None private interface unittest_assert_isnot_zero_i16_3() Arguments None private interface unittest_assert_isnot_zero_i32_3() Arguments None private interface unittest_assert_isnot_zero_i64_3() Arguments None private interface unittest_assert_isnot_zero_r32_3() Arguments None private interface unittest_assert_isnot_zero_r64_3() Arguments None private interface unittest_assert_isnot_zero_c32_3() Arguments None private interface unittest_assert_isnot_zero_c64_3() Arguments None generic, public :: assert_less => unittest_assert_less_i8_00, unittest_assert_less_i16_00, unittest_assert_less_i32_00, unittest_assert_less_i64_00, unittest_assert_less_r32_00, unittest_assert_less_r64_00, unittest_assert_less_i8_01, unittest_assert_less_i16_01, unittest_assert_less_i32_01, unittest_assert_less_i64_01, unittest_assert_less_r32_01, unittest_assert_less_r64_01, unittest_assert_less_i8_10, unittest_assert_less_i16_10, unittest_assert_less_i32_10, unittest_assert_less_i64_10, unittest_assert_less_r32_10, unittest_assert_less_r64_10, unittest_assert_less_i8_11, unittest_assert_less_i16_11, unittest_assert_less_i32_11, unittest_assert_less_i64_11, unittest_assert_less_r32_11, unittest_assert_less_r64_11 private interface unittest_assert_less_i8_00() Arguments None private interface unittest_assert_less_i16_00() Arguments None private interface unittest_assert_less_i32_00() Arguments None private interface unittest_assert_less_i64_00() Arguments None private interface unittest_assert_less_r32_00() Arguments None private interface unittest_assert_less_r64_00() Arguments None private interface unittest_assert_less_i8_01() Arguments None private interface unittest_assert_less_i16_01() Arguments None private interface unittest_assert_less_i32_01() Arguments None private interface unittest_assert_less_i64_01() Arguments None private interface unittest_assert_less_r32_01() Arguments None private interface unittest_assert_less_r64_01() Arguments None private interface unittest_assert_less_i8_10() Arguments None private interface unittest_assert_less_i16_10() Arguments None private interface unittest_assert_less_i32_10() Arguments None private interface unittest_assert_less_i64_10() Arguments None private interface unittest_assert_less_r32_10() Arguments None private interface unittest_assert_less_r64_10() Arguments None private interface unittest_assert_less_i8_11() Arguments None private interface unittest_assert_less_i16_11() Arguments None private interface unittest_assert_less_i32_11() Arguments None private interface unittest_assert_less_i64_11() Arguments None private interface unittest_assert_less_r32_11() Arguments None private interface unittest_assert_less_r64_11() Arguments None generic, public :: assert_less_equal => unittest_assert_less_equal_i8_00, unittest_assert_less_equal_i16_00, unittest_assert_less_equal_i32_00, unittest_assert_less_equal_i64_00, unittest_assert_less_equal_r32_00, unittest_assert_less_equal_r64_00, unittest_assert_less_equal_i8_01, unittest_assert_less_equal_i16_01, unittest_assert_less_equal_i32_01, unittest_assert_less_equal_i64_01, unittest_assert_less_equal_r32_01, unittest_assert_less_equal_r64_01, unittest_assert_less_equal_i8_10, unittest_assert_less_equal_i16_10, unittest_assert_less_equal_i32_10, unittest_assert_less_equal_i64_10, unittest_assert_less_equal_r32_10, unittest_assert_less_equal_r64_10, unittest_assert_less_equal_i8_11, unittest_assert_less_equal_i16_11, unittest_assert_less_equal_i32_11, unittest_assert_less_equal_i64_11, unittest_assert_less_equal_r32_11, unittest_assert_less_equal_r64_11 private interface unittest_assert_less_equal_i8_00() Arguments None private interface unittest_assert_less_equal_i16_00() Arguments None private interface unittest_assert_less_equal_i32_00() Arguments None private interface unittest_assert_less_equal_i64_00() Arguments None private interface unittest_assert_less_equal_r32_00() Arguments None private interface unittest_assert_less_equal_r64_00() Arguments None private interface unittest_assert_less_equal_i8_01() Arguments None private interface unittest_assert_less_equal_i16_01() Arguments None private interface unittest_assert_less_equal_i32_01() Arguments None private interface unittest_assert_less_equal_i64_01() Arguments None private interface unittest_assert_less_equal_r32_01() Arguments None private interface unittest_assert_less_equal_r64_01() Arguments None private interface unittest_assert_less_equal_i8_10() Arguments None private interface unittest_assert_less_equal_i16_10() Arguments None private interface unittest_assert_less_equal_i32_10() Arguments None private interface unittest_assert_less_equal_i64_10() Arguments None private interface unittest_assert_less_equal_r32_10() Arguments None private interface unittest_assert_less_equal_r64_10() Arguments None private interface unittest_assert_less_equal_i8_11() Arguments None private interface unittest_assert_less_equal_i16_11() Arguments None private interface unittest_assert_less_equal_i32_11() Arguments None private interface unittest_assert_less_equal_i64_11() Arguments None private interface unittest_assert_less_equal_r32_11() Arguments None private interface unittest_assert_less_equal_r64_11() Arguments None generic, public :: assert_not_allclose => unittest_assert_not_allclose_r32_00, unittest_assert_not_allclose_r64_00, unittest_assert_not_allclose_c32_00, unittest_assert_not_allclose_c64_00, unittest_assert_not_allclose_r32_11, unittest_assert_not_allclose_r64_11, unittest_assert_not_allclose_c32_11, unittest_assert_not_allclose_c64_11, unittest_assert_not_allclose_r32_22, unittest_assert_not_allclose_r64_22, unittest_assert_not_allclose_c32_22, unittest_assert_not_allclose_c64_22, unittest_assert_not_allclose_r32_33, unittest_assert_not_allclose_r64_33, unittest_assert_not_allclose_c32_33, unittest_assert_not_allclose_c64_33, unittest_assert_not_allclose_r32_44, unittest_assert_not_allclose_r64_44, unittest_assert_not_allclose_c32_44, unittest_assert_not_allclose_c64_44, unittest_assert_not_allclose_r32_01, unittest_assert_not_allclose_r64_01, unittest_assert_not_allclose_c32_01, unittest_assert_not_allclose_c64_01, unittest_assert_not_allclose_r32_02, unittest_assert_not_allclose_r64_02, unittest_assert_not_allclose_c32_02, unittest_assert_not_allclose_c64_02, unittest_assert_not_allclose_r32_03, unittest_assert_not_allclose_r64_03, unittest_assert_not_allclose_c32_03, unittest_assert_not_allclose_c64_03, unittest_assert_not_allclose_r32_04, unittest_assert_not_allclose_r64_04, unittest_assert_not_allclose_c32_04, unittest_assert_not_allclose_c64_04, unittest_assert_not_allclose_r32_10, unittest_assert_not_allclose_r64_10, unittest_assert_not_allclose_c32_10, unittest_assert_not_allclose_c64_10, unittest_assert_not_allclose_r32_20, unittest_assert_not_allclose_r64_20, unittest_assert_not_allclose_c32_20, unittest_assert_not_allclose_c64_20, unittest_assert_not_allclose_r32_30, unittest_assert_not_allclose_r64_30, unittest_assert_not_allclose_c32_30, unittest_assert_not_allclose_c64_30, unittest_assert_not_allclose_r32_40, unittest_assert_not_allclose_r64_40, unittest_assert_not_allclose_c32_40, unittest_assert_not_allclose_c64_40 private interface unittest_assert_not_allclose_r32_00() Arguments None private interface unittest_assert_not_allclose_r64_00() Arguments None private interface unittest_assert_not_allclose_c32_00() Arguments None private interface unittest_assert_not_allclose_c64_00() Arguments None private interface unittest_assert_not_allclose_r32_11() Arguments None private interface unittest_assert_not_allclose_r64_11() Arguments None private interface unittest_assert_not_allclose_c32_11() Arguments None private interface unittest_assert_not_allclose_c64_11() Arguments None private interface unittest_assert_not_allclose_r32_22() Arguments None private interface unittest_assert_not_allclose_r64_22() Arguments None private interface unittest_assert_not_allclose_c32_22() Arguments None private interface unittest_assert_not_allclose_c64_22() Arguments None private interface unittest_assert_not_allclose_r32_33() Arguments None private interface unittest_assert_not_allclose_r64_33() Arguments None private interface unittest_assert_not_allclose_c32_33() Arguments None private interface unittest_assert_not_allclose_c64_33() Arguments None private interface unittest_assert_not_allclose_r32_44() Arguments None private interface unittest_assert_not_allclose_r64_44() Arguments None private interface unittest_assert_not_allclose_c32_44() Arguments None private interface unittest_assert_not_allclose_c64_44() Arguments None private interface unittest_assert_not_allclose_r32_01() Arguments None private interface unittest_assert_not_allclose_r64_01() Arguments None private interface unittest_assert_not_allclose_c32_01() Arguments None private interface unittest_assert_not_allclose_c64_01() Arguments None private interface unittest_assert_not_allclose_r32_02() Arguments None private interface unittest_assert_not_allclose_r64_02() Arguments None private interface unittest_assert_not_allclose_c32_02() Arguments None private interface unittest_assert_not_allclose_c64_02() Arguments None private interface unittest_assert_not_allclose_r32_03() Arguments None private interface unittest_assert_not_allclose_r64_03() Arguments None private interface unittest_assert_not_allclose_c32_03() Arguments None private interface unittest_assert_not_allclose_c64_03() Arguments None private interface unittest_assert_not_allclose_r32_04() Arguments None private interface unittest_assert_not_allclose_r64_04() Arguments None private interface unittest_assert_not_allclose_c32_04() Arguments None private interface unittest_assert_not_allclose_c64_04() Arguments None private interface unittest_assert_not_allclose_r32_10() Arguments None private interface unittest_assert_not_allclose_r64_10() Arguments None private interface unittest_assert_not_allclose_c32_10() Arguments None private interface unittest_assert_not_allclose_c64_10() Arguments None private interface unittest_assert_not_allclose_r32_20() Arguments None private interface unittest_assert_not_allclose_r64_20() Arguments None private interface unittest_assert_not_allclose_c32_20() Arguments None private interface unittest_assert_not_allclose_c64_20() Arguments None private interface unittest_assert_not_allclose_r32_30() Arguments None private interface unittest_assert_not_allclose_r64_30() Arguments None private interface unittest_assert_not_allclose_c32_30() Arguments None private interface unittest_assert_not_allclose_c64_30() Arguments None private interface unittest_assert_not_allclose_r32_40() Arguments None private interface unittest_assert_not_allclose_r64_40() Arguments None private interface unittest_assert_not_allclose_c32_40() Arguments None private interface unittest_assert_not_allclose_c64_40() Arguments None generic, public :: assert_not_almost_equal => unittest_assert_not_almost_equal_i8_00, unittest_assert_not_almost_equal_i16_00, unittest_assert_not_almost_equal_i32_00, unittest_assert_not_almost_equal_i64_00, unittest_assert_not_almost_equal_r32_00, unittest_assert_not_almost_equal_r64_00, unittest_assert_not_almost_equal_c32_00, unittest_assert_not_almost_equal_c64_00, unittest_assert_not_almost_equal_i8_11, unittest_assert_not_almost_equal_i16_11, unittest_assert_not_almost_equal_i32_11, unittest_assert_not_almost_equal_i64_11, unittest_assert_not_almost_equal_r32_11, unittest_assert_not_almost_equal_r64_11, unittest_assert_not_almost_equal_c32_11, unittest_assert_not_almost_equal_c64_11, unittest_assert_not_almost_equal_i8_22, unittest_assert_not_almost_equal_i16_22, unittest_assert_not_almost_equal_i32_22, unittest_assert_not_almost_equal_i64_22, unittest_assert_not_almost_equal_r32_22, unittest_assert_not_almost_equal_r64_22, unittest_assert_not_almost_equal_c32_22, unittest_assert_not_almost_equal_c64_22, unittest_assert_not_almost_equal_i8_33, unittest_assert_not_almost_equal_i16_33, unittest_assert_not_almost_equal_i32_33, unittest_assert_not_almost_equal_i64_33, unittest_assert_not_almost_equal_r32_33, unittest_assert_not_almost_equal_r64_33, unittest_assert_not_almost_equal_c32_33, unittest_assert_not_almost_equal_c64_33, unittest_assert_not_almost_equal_i8_44, unittest_assert_not_almost_equal_i16_44, unittest_assert_not_almost_equal_i32_44, unittest_assert_not_almost_equal_i64_44, unittest_assert_not_almost_equal_r32_44, unittest_assert_not_almost_equal_r64_44, unittest_assert_not_almost_equal_c32_44, unittest_assert_not_almost_equal_c64_44, unittest_assert_not_almost_equal_i8_01, unittest_assert_not_almost_equal_i16_01, unittest_assert_not_almost_equal_i32_01, unittest_assert_not_almost_equal_i64_01, unittest_assert_not_almost_equal_r32_01, unittest_assert_not_almost_equal_r64_01, unittest_assert_not_almost_equal_c32_01, unittest_assert_not_almost_equal_c64_01, unittest_assert_not_almost_equal_i8_02, unittest_assert_not_almost_equal_i16_02, unittest_assert_not_almost_equal_i32_02, unittest_assert_not_almost_equal_i64_02, unittest_assert_not_almost_equal_r32_02, unittest_assert_not_almost_equal_r64_02, unittest_assert_not_almost_equal_c32_02, unittest_assert_not_almost_equal_c64_02, unittest_assert_not_almost_equal_i8_03, unittest_assert_not_almost_equal_i16_03, unittest_assert_not_almost_equal_i32_03, unittest_assert_not_almost_equal_i64_03, unittest_assert_not_almost_equal_r32_03, unittest_assert_not_almost_equal_r64_03, unittest_assert_not_almost_equal_c32_03, unittest_assert_not_almost_equal_c64_03, unittest_assert_not_almost_equal_i8_04, unittest_assert_not_almost_equal_i16_04, unittest_assert_not_almost_equal_i32_04, unittest_assert_not_almost_equal_i64_04, unittest_assert_not_almost_equal_r32_04, unittest_assert_not_almost_equal_r64_04, unittest_assert_not_almost_equal_c32_04, unittest_assert_not_almost_equal_c64_04, unittest_assert_not_almost_equal_i8_10, unittest_assert_not_almost_equal_i16_10, unittest_assert_not_almost_equal_i32_10, unittest_assert_not_almost_equal_i64_10, unittest_assert_not_almost_equal_r32_10, unittest_assert_not_almost_equal_r64_10, unittest_assert_not_almost_equal_c32_10, unittest_assert_not_almost_equal_c64_10, unittest_assert_not_almost_equal_i8_20, unittest_assert_not_almost_equal_i16_20, unittest_assert_not_almost_equal_i32_20, unittest_assert_not_almost_equal_i64_20, unittest_assert_not_almost_equal_r32_20, unittest_assert_not_almost_equal_r64_20, unittest_assert_not_almost_equal_c32_20, unittest_assert_not_almost_equal_c64_20, unittest_assert_not_almost_equal_i8_30, unittest_assert_not_almost_equal_i16_30, unittest_assert_not_almost_equal_i32_30, unittest_assert_not_almost_equal_i64_30, unittest_assert_not_almost_equal_r32_30, unittest_assert_not_almost_equal_r64_30, unittest_assert_not_almost_equal_c32_30, unittest_assert_not_almost_equal_c64_30, unittest_assert_not_almost_equal_i8_40, unittest_assert_not_almost_equal_i16_40, unittest_assert_not_almost_equal_i32_40, unittest_assert_not_almost_equal_i64_40, unittest_assert_not_almost_equal_r32_40, unittest_assert_not_almost_equal_r64_40, unittest_assert_not_almost_equal_c32_40, unittest_assert_not_almost_equal_c64_40 private interface unittest_assert_not_almost_equal_i8_00() Arguments None private interface unittest_assert_not_almost_equal_i16_00() Arguments None private interface unittest_assert_not_almost_equal_i32_00() Arguments None private interface unittest_assert_not_almost_equal_i64_00() Arguments None private interface unittest_assert_not_almost_equal_r32_00() Arguments None private interface unittest_assert_not_almost_equal_r64_00() Arguments None private interface unittest_assert_not_almost_equal_c32_00() Arguments None private interface unittest_assert_not_almost_equal_c64_00() Arguments None private interface unittest_assert_not_almost_equal_i8_11() Arguments None private interface unittest_assert_not_almost_equal_i16_11() Arguments None private interface unittest_assert_not_almost_equal_i32_11() Arguments None private interface unittest_assert_not_almost_equal_i64_11() Arguments None private interface unittest_assert_not_almost_equal_r32_11() Arguments None private interface unittest_assert_not_almost_equal_r64_11() Arguments None private interface unittest_assert_not_almost_equal_c32_11() Arguments None private interface unittest_assert_not_almost_equal_c64_11() Arguments None private interface unittest_assert_not_almost_equal_i8_22() Arguments None private interface unittest_assert_not_almost_equal_i16_22() Arguments None private interface unittest_assert_not_almost_equal_i32_22() Arguments None private interface unittest_assert_not_almost_equal_i64_22() Arguments None private interface unittest_assert_not_almost_equal_r32_22() Arguments None private interface unittest_assert_not_almost_equal_r64_22() Arguments None private interface unittest_assert_not_almost_equal_c32_22() Arguments None private interface unittest_assert_not_almost_equal_c64_22() Arguments None private interface unittest_assert_not_almost_equal_i8_33() Arguments None private interface unittest_assert_not_almost_equal_i16_33() Arguments None private interface unittest_assert_not_almost_equal_i32_33() Arguments None private interface unittest_assert_not_almost_equal_i64_33() Arguments None private interface unittest_assert_not_almost_equal_r32_33() Arguments None private interface unittest_assert_not_almost_equal_r64_33() Arguments None private interface unittest_assert_not_almost_equal_c32_33() Arguments None private interface unittest_assert_not_almost_equal_c64_33() Arguments None private interface unittest_assert_not_almost_equal_i8_44() Arguments None private interface unittest_assert_not_almost_equal_i16_44() Arguments None private interface unittest_assert_not_almost_equal_i32_44() Arguments None private interface unittest_assert_not_almost_equal_i64_44() Arguments None private interface unittest_assert_not_almost_equal_r32_44() Arguments None private interface unittest_assert_not_almost_equal_r64_44() Arguments None private interface unittest_assert_not_almost_equal_c32_44() Arguments None private interface unittest_assert_not_almost_equal_c64_44() Arguments None private interface unittest_assert_not_almost_equal_i8_01() Arguments None private interface unittest_assert_not_almost_equal_i16_01() Arguments None private interface unittest_assert_not_almost_equal_i32_01() Arguments None private interface unittest_assert_not_almost_equal_i64_01() Arguments None private interface unittest_assert_not_almost_equal_r32_01() Arguments None private interface unittest_assert_not_almost_equal_r64_01() Arguments None private interface unittest_assert_not_almost_equal_c32_01() Arguments None private interface unittest_assert_not_almost_equal_c64_01() Arguments None private interface unittest_assert_not_almost_equal_i8_02() Arguments None private interface unittest_assert_not_almost_equal_i16_02() Arguments None private interface unittest_assert_not_almost_equal_i32_02() Arguments None private interface unittest_assert_not_almost_equal_i64_02() Arguments None private interface unittest_assert_not_almost_equal_r32_02() Arguments None private interface unittest_assert_not_almost_equal_r64_02() Arguments None private interface unittest_assert_not_almost_equal_c32_02() Arguments None private interface unittest_assert_not_almost_equal_c64_02() Arguments None private interface unittest_assert_not_almost_equal_i8_03() Arguments None private interface unittest_assert_not_almost_equal_i16_03() Arguments None private interface unittest_assert_not_almost_equal_i32_03() Arguments None private interface unittest_assert_not_almost_equal_i64_03() Arguments None private interface unittest_assert_not_almost_equal_r32_03() Arguments None private interface unittest_assert_not_almost_equal_r64_03() Arguments None private interface unittest_assert_not_almost_equal_c32_03() Arguments None private interface unittest_assert_not_almost_equal_c64_03() Arguments None private interface unittest_assert_not_almost_equal_i8_04() Arguments None private interface unittest_assert_not_almost_equal_i16_04() Arguments None private interface unittest_assert_not_almost_equal_i32_04() Arguments None private interface unittest_assert_not_almost_equal_i64_04() Arguments None private interface unittest_assert_not_almost_equal_r32_04() Arguments None private interface unittest_assert_not_almost_equal_r64_04() Arguments None private interface unittest_assert_not_almost_equal_c32_04() Arguments None private interface unittest_assert_not_almost_equal_c64_04() Arguments None private interface unittest_assert_not_almost_equal_i8_10() Arguments None private interface unittest_assert_not_almost_equal_i16_10() Arguments None private interface unittest_assert_not_almost_equal_i32_10() Arguments None private interface unittest_assert_not_almost_equal_i64_10() Arguments None private interface unittest_assert_not_almost_equal_r32_10() Arguments None private interface unittest_assert_not_almost_equal_r64_10() Arguments None private interface unittest_assert_not_almost_equal_c32_10() Arguments None private interface unittest_assert_not_almost_equal_c64_10() Arguments None private interface unittest_assert_not_almost_equal_i8_20() Arguments None private interface unittest_assert_not_almost_equal_i16_20() Arguments None private interface unittest_assert_not_almost_equal_i32_20() Arguments None private interface unittest_assert_not_almost_equal_i64_20() Arguments None private interface unittest_assert_not_almost_equal_r32_20() Arguments None private interface unittest_assert_not_almost_equal_r64_20() Arguments None private interface unittest_assert_not_almost_equal_c32_20() Arguments None private interface unittest_assert_not_almost_equal_c64_20() Arguments None private interface unittest_assert_not_almost_equal_i8_30() Arguments None private interface unittest_assert_not_almost_equal_i16_30() Arguments None private interface unittest_assert_not_almost_equal_i32_30() Arguments None private interface unittest_assert_not_almost_equal_i64_30() Arguments None private interface unittest_assert_not_almost_equal_r32_30() Arguments None private interface unittest_assert_not_almost_equal_r64_30() Arguments None private interface unittest_assert_not_almost_equal_c32_30() Arguments None private interface unittest_assert_not_almost_equal_c64_30() Arguments None private interface unittest_assert_not_almost_equal_i8_40() Arguments None private interface unittest_assert_not_almost_equal_i16_40() Arguments None private interface unittest_assert_not_almost_equal_i32_40() Arguments None private interface unittest_assert_not_almost_equal_i64_40() Arguments None private interface unittest_assert_not_almost_equal_r32_40() Arguments None private interface unittest_assert_not_almost_equal_r64_40() Arguments None private interface unittest_assert_not_almost_equal_c32_40() Arguments None private interface unittest_assert_not_almost_equal_c64_40() Arguments None generic, public :: assert_not_equal => unittest_assert_not_equal_i8_00, unittest_assert_not_equal_i16_00, unittest_assert_not_equal_i32_00, unittest_assert_not_equal_i64_00, unittest_assert_not_equal_logical_00, unittest_assert_not_equal_i8_11, unittest_assert_not_equal_i16_11, unittest_assert_not_equal_i32_11, unittest_assert_not_equal_i64_11, unittest_assert_not_equal_logical_11, unittest_assert_not_equal_i8_22, unittest_assert_not_equal_i16_22, unittest_assert_not_equal_i32_22, unittest_assert_not_equal_i64_22, unittest_assert_not_equal_logical_22, unittest_assert_not_equal_i8_33, unittest_assert_not_equal_i16_33, unittest_assert_not_equal_i32_33, unittest_assert_not_equal_i64_33, unittest_assert_not_equal_logical_33, unittest_assert_not_equal_i8_44, unittest_assert_not_equal_i16_44, unittest_assert_not_equal_i32_44, unittest_assert_not_equal_i64_44, unittest_assert_not_equal_logical_44, unittest_assert_not_equal_i8_01, unittest_assert_not_equal_i16_01, unittest_assert_not_equal_i32_01, unittest_assert_not_equal_i64_01, unittest_assert_not_equal_logical_01, unittest_assert_not_equal_i8_02, unittest_assert_not_equal_i16_02, unittest_assert_not_equal_i32_02, unittest_assert_not_equal_i64_02, unittest_assert_not_equal_logical_02, unittest_assert_not_equal_i8_03, unittest_assert_not_equal_i16_03, unittest_assert_not_equal_i32_03, unittest_assert_not_equal_i64_03, unittest_assert_not_equal_logical_03, unittest_assert_not_equal_i8_04, unittest_assert_not_equal_i16_04, unittest_assert_not_equal_i32_04, unittest_assert_not_equal_i64_04, unittest_assert_not_equal_logical_04, unittest_assert_not_equal_i8_10, unittest_assert_not_equal_i16_10, unittest_assert_not_equal_i32_10, unittest_assert_not_equal_i64_10, unittest_assert_not_equal_logical_10, unittest_assert_not_equal_i8_20, unittest_assert_not_equal_i16_20, unittest_assert_not_equal_i32_20, unittest_assert_not_equal_i64_20, unittest_assert_not_equal_logical_20, unittest_assert_not_equal_i8_30, unittest_assert_not_equal_i16_30, unittest_assert_not_equal_i32_30, unittest_assert_not_equal_i64_30, unittest_assert_not_equal_logical_30, unittest_assert_not_equal_i8_40, unittest_assert_not_equal_i16_40, unittest_assert_not_equal_i32_40, unittest_assert_not_equal_i64_40, unittest_assert_not_equal_logical_40 private interface unittest_assert_not_equal_i8_00() Arguments None private interface unittest_assert_not_equal_i16_00() Arguments None private interface unittest_assert_not_equal_i32_00() Arguments None private interface unittest_assert_not_equal_i64_00() Arguments None private interface unittest_assert_not_equal_logical_00() Arguments None private interface unittest_assert_not_equal_i8_11() Arguments None private interface unittest_assert_not_equal_i16_11() Arguments None private interface unittest_assert_not_equal_i32_11() Arguments None private interface unittest_assert_not_equal_i64_11() Arguments None private interface unittest_assert_not_equal_logical_11() Arguments None private interface unittest_assert_not_equal_i8_22() Arguments None private interface unittest_assert_not_equal_i16_22() Arguments None private interface unittest_assert_not_equal_i32_22() Arguments None private interface unittest_assert_not_equal_i64_22() Arguments None private interface unittest_assert_not_equal_logical_22() Arguments None private interface unittest_assert_not_equal_i8_33() Arguments None private interface unittest_assert_not_equal_i16_33() Arguments None private interface unittest_assert_not_equal_i32_33() Arguments None private interface unittest_assert_not_equal_i64_33() Arguments None private interface unittest_assert_not_equal_logical_33() Arguments None private interface unittest_assert_not_equal_i8_44() Arguments None private interface unittest_assert_not_equal_i16_44() Arguments None private interface unittest_assert_not_equal_i32_44() Arguments None private interface unittest_assert_not_equal_i64_44() Arguments None private interface unittest_assert_not_equal_logical_44() Arguments None private interface unittest_assert_not_equal_i8_01() Arguments None private interface unittest_assert_not_equal_i16_01() Arguments None private interface unittest_assert_not_equal_i32_01() Arguments None private interface unittest_assert_not_equal_i64_01() Arguments None private interface unittest_assert_not_equal_logical_01() Arguments None private interface unittest_assert_not_equal_i8_02() Arguments None private interface unittest_assert_not_equal_i16_02() Arguments None private interface unittest_assert_not_equal_i32_02() Arguments None private interface unittest_assert_not_equal_i64_02() Arguments None private interface unittest_assert_not_equal_logical_02() Arguments None private interface unittest_assert_not_equal_i8_03() Arguments None private interface unittest_assert_not_equal_i16_03() Arguments None private interface unittest_assert_not_equal_i32_03() Arguments None private interface unittest_assert_not_equal_i64_03() Arguments None private interface unittest_assert_not_equal_logical_03() Arguments None private interface unittest_assert_not_equal_i8_04() Arguments None private interface unittest_assert_not_equal_i16_04() Arguments None private interface unittest_assert_not_equal_i32_04() Arguments None private interface unittest_assert_not_equal_i64_04() Arguments None private interface unittest_assert_not_equal_logical_04() Arguments None private interface unittest_assert_not_equal_i8_10() Arguments None private interface unittest_assert_not_equal_i16_10() Arguments None private interface unittest_assert_not_equal_i32_10() Arguments None private interface unittest_assert_not_equal_i64_10() Arguments None private interface unittest_assert_not_equal_logical_10() Arguments None private interface unittest_assert_not_equal_i8_20() Arguments None private interface unittest_assert_not_equal_i16_20() Arguments None private interface unittest_assert_not_equal_i32_20() Arguments None private interface unittest_assert_not_equal_i64_20() Arguments None private interface unittest_assert_not_equal_logical_20() Arguments None private interface unittest_assert_not_equal_i8_30() Arguments None private interface unittest_assert_not_equal_i16_30() Arguments None private interface unittest_assert_not_equal_i32_30() Arguments None private interface unittest_assert_not_equal_i64_30() Arguments None private interface unittest_assert_not_equal_logical_30() Arguments None private interface unittest_assert_not_equal_i8_40() Arguments None private interface unittest_assert_not_equal_i16_40() Arguments None private interface unittest_assert_not_equal_i32_40() Arguments None private interface unittest_assert_not_equal_i64_40() Arguments None private interface unittest_assert_not_equal_logical_40() Arguments None generic, public :: assert_true => unittest_assert_true_logical_0, unittest_assert_true_logical_1, unittest_assert_true_logical_2, unittest_assert_true_logical_3 private interface unittest_assert_true_logical_0() Arguments None private interface unittest_assert_true_logical_1() Arguments None private interface unittest_assert_true_logical_2() Arguments None private interface unittest_assert_true_logical_3() Arguments None procedure, public :: finish => utest_finish private subroutine utest_finish(this) Arguments Type Intent Optional Attributes Name class( unittest ), intent(inout) :: this procedure, public :: finish_and_terminate => utest_finish_and_terminate private subroutine utest_finish_and_terminate(this) Arguments Type Intent Optional Attributes Name class( unittest ), intent(inout) :: this procedure, public :: init => utest_init private subroutine utest_init(this, section, terminate_with_error_code) Arguments Type Intent Optional Attributes Name class( unittest ), intent(inout) :: this character, intent(in), optional :: section logical, intent(in), optional :: terminate_with_error_code Source Code type unittest private integer :: dev integer :: num_test integer :: num_error integer :: start_time real ( RK ) :: start_cpu_time character (:), allocatable :: script_name logical :: terminate_with_error_code = . true . contains procedure :: init => utest_init #:for routine in [\"assert\", \"assert_true\", \"assert_false\"] ${ generic_procedure ( routine , LOGICAL_KIND_TYPE_POSTS , [( rank , None ) for rank in range ( 4 )]) }$ #:endfor #:for routine in [\"assert_equal\", \"assert_not_equal\"] ${ generic_procedure ( routine , INTEGER_KIND_TYPE_POSTS + LOGICAL_KIND_TYPE_POSTS , [( 0 , 0 ), ( 1 , 1 ), ( 2 , 2 ), ( 3 , 3 ), ( 4 , 4 ), ( 0 , 1 ), ( 0 , 2 ), ( 0 , 3 ), ( 0 , 4 ), ( 1 , 0 ), ( 2 , 0 ), ( 3 , 0 ), ( 4 , 0 )]) }$ #:endfor #:for routine in [\"assert_almost_equal\", \"assert_not_almost_equal\"] ${ generic_procedure ( routine , INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS , [( 0 , 0 ), ( 1 , 1 ), ( 2 , 2 ), ( 3 , 3 ), ( 4 , 4 ), ( 0 , 1 ), ( 0 , 2 ), ( 0 , 3 ), ( 0 , 4 ), ( 1 , 0 ), ( 2 , 0 ), ( 3 , 0 ), ( 4 , 0 )]) }$ #:endfor #:for routine in [\"assert_less\", \"assert_less_equal\", \"assert_greater\", \"assert_greater_equal\"] ${ generic_procedure ( routine , INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS , [( 0 , 0 ), ( 0 , 1 ), ( 1 , 0 ), ( 1 , 1 )]) }$ #:endfor #:for routine in [\"assert_is_eye\", \"assert_isnot_eye\"] ${ generic_procedure ( routine , INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS , [( 2 , None )]) }$ #:endfor #:for routine in [\"assert_is_zero\", \"assert_isnot_zero\"] ${ generic_procedure ( routine , INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS , [( rank , None ) for rank in range ( 4 )]) }$ #:endfor #:for routine in [\"assert_allclose\", \"assert_not_allclose\"] ${ generic_procedure ( routine , REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS , [( 0 , 0 ), ( 1 , 1 ), ( 2 , 2 ), ( 3 , 3 ), ( 4 , 4 ), ( 0 , 1 ), ( 0 , 2 ), ( 0 , 3 ), ( 0 , 4 ), ( 1 , 0 ), ( 2 , 0 ), ( 3 , 0 ), ( 4 , 0 )]) }$ #:endfor procedure :: finish => utest_finish procedure :: finish_and_terminate => utest_finish_and_terminate final :: utest_destroy end type unittest","tags":"","loc":"type/unittest.html"},{"title":"expr_report â€“ unittest ","text":"type, public :: expr_report sequence Contents Source Code expr_report Source Code type expr_report sequence logical :: ok real ( RK ) :: error_rate character ( L_MSG ) :: msg end type expr_report","tags":"","loc":"type/expr_report.html"},{"title":"unittest â€“ unittest","text":"public interface unittest Contents Module Procedures utest_new Module Procedures private function utest_new(section, terminate_with_error_code) result(res) Arguments Type Intent Optional Attributes Name character, intent(in), optional :: section logical, intent(in), optional :: terminate_with_error_code Return Value type( unittest )","tags":"","loc":"interface/unittest.html"},{"title":"check_expr_all â€“ unittest","text":"public subroutine check_expr_all(dev, num_test, expr, unitname, num_error, err) Arguments Type Intent Optional Attributes Name integer, intent(in) :: dev integer, intent(in) :: num_test type( expr_report ), intent(in) :: expr (:) character, intent(in) :: unitname integer, intent(inout) :: num_error logical, intent(inout) :: err Contents Source Code check_expr_all Source Code subroutine check_expr_all ( dev , num_test , expr , unitname , num_error , err ) integer , intent ( in ) :: dev integer , intent ( in ) :: num_test type ( expr_report ), intent ( in ) :: expr (:) character ( * ), intent ( in ) :: unitname integer , intent ( inout ) :: num_error logical , intent ( inout ) :: err err = . not . ALL ( expr % ok ) if ( err ) num_error = num_error + 1 call report_result ( dev , num_test , err , expr , unitname ) end subroutine check_expr_all","tags":"","loc":"proc/check_expr_all.html"},{"title":"check_expr_not_any â€“ unittest","text":"public subroutine check_expr_not_any(dev, num_test, expr, unitname, num_error, err) Arguments Type Intent Optional Attributes Name integer, intent(in) :: dev integer, intent(in) :: num_test type( expr_report ), intent(in) :: expr (:) character, intent(in) :: unitname integer, intent(inout) :: num_error logical, intent(inout) :: err Contents Source Code check_expr_not_any Source Code subroutine check_expr_not_any ( dev , num_test , expr , unitname , num_error , err ) integer , intent ( in ) :: dev integer , intent ( in ) :: num_test type ( expr_report ), intent ( in ) :: expr (:) character ( * ), intent ( in ) :: unitname integer , intent ( inout ) :: num_error logical , intent ( inout ) :: err err = ANY ( expr % ok ) if ( err ) num_error = num_error + 1 call report_result ( dev , num_test , err , expr , unitname ) end subroutine check_expr_not_any","tags":"","loc":"proc/check_expr_not_any.html"},{"title":"check_rank â€“ unittest","text":"public subroutine check_rank(dev, num_test, size_a, size_b, unitname, num_error, err) Arguments Type Intent Optional Attributes Name integer, intent(in) :: dev integer, intent(in) :: num_test integer, intent(in) :: size_a integer, intent(in) :: size_b character, intent(in) :: unitname integer, intent(inout) :: num_error logical, intent(inout) :: err Contents Source Code check_rank Source Code subroutine check_rank ( dev , num_test , size_a , size_b , unitname , num_error , err ) !! integer , intent ( in ) :: dev integer , intent ( in ) :: num_test integer , intent ( in ) :: size_a integer , intent ( in ) :: size_b character ( * ), intent ( in ) :: unitname integer , intent ( inout ) :: num_error logical , intent ( inout ) :: err integer :: ios err = size_a /= size_b ; if (. not . err ) return num_error = num_error + 1 write ( dev , '(I8,A)' , IOSTAT = ios ) num_test , padd_string ( unitname , '... failed' , L_WDH ) write ( dev , '(A)' , IOSTAT = ios ) SEP3 write ( dev , '(2A,I0,A,I0,A)' , IOSTAT = ios ) rankMissMatch , '[' , size_a , '] /= [' , size_b , ']' write ( dev , '(A)' , IOSTAT = ios ) SEP3 FLUSH ( dev ) end subroutine check_rank","tags":"","loc":"proc/check_rank.html"},{"title":"mod_unittest â€“ unittest","text":"Fortran unit testing framework. Uses mod_kinds iso_fortran_env module~~mod_unittest~~UsesGraph module~mod_unittest mod_unittest module~mod_kinds mod_kinds module~mod_unittest->module~mod_kinds iso_fortran_env iso_fortran_env module~mod_unittest->iso_fortran_env module~mod_kinds->iso_fortran_env Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: allclose almost_equal bool compare equal error_stop_08 error_stop_f18 is_eye is_zero module~~mod_unittest~~UsedByGraph module~mod_unittest mod_unittest module~error_stop_08 error_stop_08 module~error_stop_08->module~mod_unittest module~compare compare module~compare->module~mod_unittest module~error_stop_f18 error_stop_f18 module~error_stop_f18->module~mod_unittest module~allclose allclose module~allclose->module~mod_unittest module~equal equal module~equal->module~mod_unittest module~bool bool module~bool->module~mod_unittest module~almost_equal almost_equal module~almost_equal->module~mod_unittest module~is_eye is_eye module~is_eye->module~mod_unittest module~is_zero is_zero module~is_zero->module~mod_unittest Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces unittest Derived Types unittest Interfaces public interface unittest private function utest_new(section, terminate_with_error_code) result(res) Arguments Type Intent Optional Attributes Name character, intent(in), optional :: section logical, intent(in), optional :: terminate_with_error_code Return Value type( unittest ) Derived Types type, public :: unittest Constructor private  function utest_new (section, terminate_with_error_code) Finalizations Procedures final :: utest_destroy Type-Bound Procedures generic, public :: assert => unittest_assert_logical_0, unittest_assert_logical_1, unittest_assert_logical_2, unittest_assert_logical_3 generic, public :: assert_allclose => unittest_assert_allclose_r32_00, unittest_assert_allclose_r64_00, unittest_assert_allclose_c32_00, unittest_assert_allclose_c64_00, unittest_assert_allclose_r32_11, unittest_assert_allclose_r64_11, unittest_assert_allclose_c32_11, unittest_assert_allclose_c64_11, unittest_assert_allclose_r32_22, unittest_assert_allclose_r64_22, unittest_assert_allclose_c32_22, unittest_assert_allclose_c64_22, unittest_assert_allclose_r32_33, unittest_assert_allclose_r64_33, unittest_assert_allclose_c32_33, unittest_assert_allclose_c64_33, unittest_assert_allclose_r32_44, unittest_assert_allclose_r64_44, unittest_assert_allclose_c32_44, unittest_assert_allclose_c64_44, unittest_assert_allclose_r32_01, unittest_assert_allclose_r64_01, unittest_assert_allclose_c32_01, unittest_assert_allclose_c64_01, unittest_assert_allclose_r32_02, unittest_assert_allclose_r64_02, unittest_assert_allclose_c32_02, unittest_assert_allclose_c64_02, unittest_assert_allclose_r32_03, unittest_assert_allclose_r64_03, unittest_assert_allclose_c32_03, unittest_assert_allclose_c64_03, unittest_assert_allclose_r32_04, unittest_assert_allclose_r64_04, unittest_assert_allclose_c32_04, unittest_assert_allclose_c64_04, unittest_assert_allclose_r32_10, unittest_assert_allclose_r64_10, unittest_assert_allclose_c32_10, unittest_assert_allclose_c64_10, unittest_assert_allclose_r32_20, unittest_assert_allclose_r64_20, unittest_assert_allclose_c32_20, unittest_assert_allclose_c64_20, unittest_assert_allclose_r32_30, unittest_assert_allclose_r64_30, unittest_assert_allclose_c32_30, unittest_assert_allclose_c64_30, unittest_assert_allclose_r32_40, unittest_assert_allclose_r64_40, unittest_assert_allclose_c32_40, unittest_assert_allclose_c64_40 generic, public :: assert_almost_equal => unittest_assert_almost_equal_i8_00, unittest_assert_almost_equal_i16_00, unittest_assert_almost_equal_i32_00, unittest_assert_almost_equal_i64_00, unittest_assert_almost_equal_r32_00, unittest_assert_almost_equal_r64_00, unittest_assert_almost_equal_c32_00, unittest_assert_almost_equal_c64_00, unittest_assert_almost_equal_i8_11, unittest_assert_almost_equal_i16_11, unittest_assert_almost_equal_i32_11, unittest_assert_almost_equal_i64_11, unittest_assert_almost_equal_r32_11, unittest_assert_almost_equal_r64_11, unittest_assert_almost_equal_c32_11, unittest_assert_almost_equal_c64_11, unittest_assert_almost_equal_i8_22, unittest_assert_almost_equal_i16_22, unittest_assert_almost_equal_i32_22, unittest_assert_almost_equal_i64_22, unittest_assert_almost_equal_r32_22, unittest_assert_almost_equal_r64_22, unittest_assert_almost_equal_c32_22, unittest_assert_almost_equal_c64_22, unittest_assert_almost_equal_i8_33, unittest_assert_almost_equal_i16_33, unittest_assert_almost_equal_i32_33, unittest_assert_almost_equal_i64_33, unittest_assert_almost_equal_r32_33, unittest_assert_almost_equal_r64_33, unittest_assert_almost_equal_c32_33, unittest_assert_almost_equal_c64_33, unittest_assert_almost_equal_i8_44, unittest_assert_almost_equal_i16_44, unittest_assert_almost_equal_i32_44, unittest_assert_almost_equal_i64_44, unittest_assert_almost_equal_r32_44, unittest_assert_almost_equal_r64_44, unittest_assert_almost_equal_c32_44, unittest_assert_almost_equal_c64_44, unittest_assert_almost_equal_i8_01, unittest_assert_almost_equal_i16_01, unittest_assert_almost_equal_i32_01, unittest_assert_almost_equal_i64_01, unittest_assert_almost_equal_r32_01, unittest_assert_almost_equal_r64_01, unittest_assert_almost_equal_c32_01, unittest_assert_almost_equal_c64_01, unittest_assert_almost_equal_i8_02, unittest_assert_almost_equal_i16_02, unittest_assert_almost_equal_i32_02, unittest_assert_almost_equal_i64_02, unittest_assert_almost_equal_r32_02, unittest_assert_almost_equal_r64_02, unittest_assert_almost_equal_c32_02, unittest_assert_almost_equal_c64_02, unittest_assert_almost_equal_i8_03, unittest_assert_almost_equal_i16_03, unittest_assert_almost_equal_i32_03, unittest_assert_almost_equal_i64_03, unittest_assert_almost_equal_r32_03, unittest_assert_almost_equal_r64_03, unittest_assert_almost_equal_c32_03, unittest_assert_almost_equal_c64_03, unittest_assert_almost_equal_i8_04, unittest_assert_almost_equal_i16_04, unittest_assert_almost_equal_i32_04, unittest_assert_almost_equal_i64_04, unittest_assert_almost_equal_r32_04, unittest_assert_almost_equal_r64_04, unittest_assert_almost_equal_c32_04, unittest_assert_almost_equal_c64_04, unittest_assert_almost_equal_i8_10, unittest_assert_almost_equal_i16_10, unittest_assert_almost_equal_i32_10, unittest_assert_almost_equal_i64_10, unittest_assert_almost_equal_r32_10, unittest_assert_almost_equal_r64_10, unittest_assert_almost_equal_c32_10, unittest_assert_almost_equal_c64_10, unittest_assert_almost_equal_i8_20, unittest_assert_almost_equal_i16_20, unittest_assert_almost_equal_i32_20, unittest_assert_almost_equal_i64_20, unittest_assert_almost_equal_r32_20, unittest_assert_almost_equal_r64_20, unittest_assert_almost_equal_c32_20, unittest_assert_almost_equal_c64_20, unittest_assert_almost_equal_i8_30, unittest_assert_almost_equal_i16_30, unittest_assert_almost_equal_i32_30, unittest_assert_almost_equal_i64_30, unittest_assert_almost_equal_r32_30, unittest_assert_almost_equal_r64_30, unittest_assert_almost_equal_c32_30, unittest_assert_almost_equal_c64_30, unittest_assert_almost_equal_i8_40, unittest_assert_almost_equal_i16_40, unittest_assert_almost_equal_i32_40, unittest_assert_almost_equal_i64_40, unittest_assert_almost_equal_r32_40, unittest_assert_almost_equal_r64_40, unittest_assert_almost_equal_c32_40, unittest_assert_almost_equal_c64_40 generic, public :: assert_equal => unittest_assert_equal_i8_00, unittest_assert_equal_i16_00, unittest_assert_equal_i32_00, unittest_assert_equal_i64_00, unittest_assert_equal_logical_00, unittest_assert_equal_i8_11, unittest_assert_equal_i16_11, unittest_assert_equal_i32_11, unittest_assert_equal_i64_11, unittest_assert_equal_logical_11, unittest_assert_equal_i8_22, unittest_assert_equal_i16_22, unittest_assert_equal_i32_22, unittest_assert_equal_i64_22, unittest_assert_equal_logical_22, unittest_assert_equal_i8_33, unittest_assert_equal_i16_33, unittest_assert_equal_i32_33, unittest_assert_equal_i64_33, unittest_assert_equal_logical_33, unittest_assert_equal_i8_44, unittest_assert_equal_i16_44, unittest_assert_equal_i32_44, unittest_assert_equal_i64_44, unittest_assert_equal_logical_44, unittest_assert_equal_i8_01, unittest_assert_equal_i16_01, unittest_assert_equal_i32_01, unittest_assert_equal_i64_01, unittest_assert_equal_logical_01, unittest_assert_equal_i8_02, unittest_assert_equal_i16_02, unittest_assert_equal_i32_02, unittest_assert_equal_i64_02, unittest_assert_equal_logical_02, unittest_assert_equal_i8_03, unittest_assert_equal_i16_03, unittest_assert_equal_i32_03, unittest_assert_equal_i64_03, unittest_assert_equal_logical_03, unittest_assert_equal_i8_04, unittest_assert_equal_i16_04, unittest_assert_equal_i32_04, unittest_assert_equal_i64_04, unittest_assert_equal_logical_04, unittest_assert_equal_i8_10, unittest_assert_equal_i16_10, unittest_assert_equal_i32_10, unittest_assert_equal_i64_10, unittest_assert_equal_logical_10, unittest_assert_equal_i8_20, unittest_assert_equal_i16_20, unittest_assert_equal_i32_20, unittest_assert_equal_i64_20, unittest_assert_equal_logical_20, unittest_assert_equal_i8_30, unittest_assert_equal_i16_30, unittest_assert_equal_i32_30, unittest_assert_equal_i64_30, unittest_assert_equal_logical_30, unittest_assert_equal_i8_40, unittest_assert_equal_i16_40, unittest_assert_equal_i32_40, unittest_assert_equal_i64_40, unittest_assert_equal_logical_40 generic, public :: assert_false => unittest_assert_false_logical_0, unittest_assert_false_logical_1, unittest_assert_false_logical_2, unittest_assert_false_logical_3 generic, public :: assert_greater => unittest_assert_greater_i8_00, unittest_assert_greater_i16_00, unittest_assert_greater_i32_00, unittest_assert_greater_i64_00, unittest_assert_greater_r32_00, unittest_assert_greater_r64_00, unittest_assert_greater_i8_01, unittest_assert_greater_i16_01, unittest_assert_greater_i32_01, unittest_assert_greater_i64_01, unittest_assert_greater_r32_01, unittest_assert_greater_r64_01, unittest_assert_greater_i8_10, unittest_assert_greater_i16_10, unittest_assert_greater_i32_10, unittest_assert_greater_i64_10, unittest_assert_greater_r32_10, unittest_assert_greater_r64_10, unittest_assert_greater_i8_11, unittest_assert_greater_i16_11, unittest_assert_greater_i32_11, unittest_assert_greater_i64_11, unittest_assert_greater_r32_11, unittest_assert_greater_r64_11 generic, public :: assert_greater_equal => unittest_assert_greater_equal_i8_00, unittest_assert_greater_equal_i16_00, unittest_assert_greater_equal_i32_00, unittest_assert_greater_equal_i64_00, unittest_assert_greater_equal_r32_00, unittest_assert_greater_equal_r64_00, unittest_assert_greater_equal_i8_01, unittest_assert_greater_equal_i16_01, unittest_assert_greater_equal_i32_01, unittest_assert_greater_equal_i64_01, unittest_assert_greater_equal_r32_01, unittest_assert_greater_equal_r64_01, unittest_assert_greater_equal_i8_10, unittest_assert_greater_equal_i16_10, unittest_assert_greater_equal_i32_10, unittest_assert_greater_equal_i64_10, unittest_assert_greater_equal_r32_10, unittest_assert_greater_equal_r64_10, unittest_assert_greater_equal_i8_11, unittest_assert_greater_equal_i16_11, unittest_assert_greater_equal_i32_11, unittest_assert_greater_equal_i64_11, unittest_assert_greater_equal_r32_11, unittest_assert_greater_equal_r64_11 generic, public :: assert_is_eye => unittest_assert_is_eye_i8_2, unittest_assert_is_eye_i16_2, unittest_assert_is_eye_i32_2, unittest_assert_is_eye_i64_2, unittest_assert_is_eye_r32_2, unittest_assert_is_eye_r64_2, unittest_assert_is_eye_c32_2, unittest_assert_is_eye_c64_2 generic, public :: assert_is_zero => unittest_assert_is_zero_i8_0, unittest_assert_is_zero_i16_0, unittest_assert_is_zero_i32_0, unittest_assert_is_zero_i64_0, unittest_assert_is_zero_r32_0, unittest_assert_is_zero_r64_0, unittest_assert_is_zero_c32_0, unittest_assert_is_zero_c64_0, unittest_assert_is_zero_i8_1, unittest_assert_is_zero_i16_1, unittest_assert_is_zero_i32_1, unittest_assert_is_zero_i64_1, unittest_assert_is_zero_r32_1, unittest_assert_is_zero_r64_1, unittest_assert_is_zero_c32_1, unittest_assert_is_zero_c64_1, unittest_assert_is_zero_i8_2, unittest_assert_is_zero_i16_2, unittest_assert_is_zero_i32_2, unittest_assert_is_zero_i64_2, unittest_assert_is_zero_r32_2, unittest_assert_is_zero_r64_2, unittest_assert_is_zero_c32_2, unittest_assert_is_zero_c64_2, unittest_assert_is_zero_i8_3, unittest_assert_is_zero_i16_3, unittest_assert_is_zero_i32_3, unittest_assert_is_zero_i64_3, unittest_assert_is_zero_r32_3, unittest_assert_is_zero_r64_3, unittest_assert_is_zero_c32_3, unittest_assert_is_zero_c64_3 generic, public :: assert_isnot_eye => unittest_assert_isnot_eye_i8_2, unittest_assert_isnot_eye_i16_2, unittest_assert_isnot_eye_i32_2, unittest_assert_isnot_eye_i64_2, unittest_assert_isnot_eye_r32_2, unittest_assert_isnot_eye_r64_2, unittest_assert_isnot_eye_c32_2, unittest_assert_isnot_eye_c64_2 generic, public :: assert_isnot_zero => unittest_assert_isnot_zero_i8_0, unittest_assert_isnot_zero_i16_0, unittest_assert_isnot_zero_i32_0, unittest_assert_isnot_zero_i64_0, unittest_assert_isnot_zero_r32_0, unittest_assert_isnot_zero_r64_0, unittest_assert_isnot_zero_c32_0, unittest_assert_isnot_zero_c64_0, unittest_assert_isnot_zero_i8_1, unittest_assert_isnot_zero_i16_1, unittest_assert_isnot_zero_i32_1, unittest_assert_isnot_zero_i64_1, unittest_assert_isnot_zero_r32_1, unittest_assert_isnot_zero_r64_1, unittest_assert_isnot_zero_c32_1, unittest_assert_isnot_zero_c64_1, unittest_assert_isnot_zero_i8_2, unittest_assert_isnot_zero_i16_2, unittest_assert_isnot_zero_i32_2, unittest_assert_isnot_zero_i64_2, unittest_assert_isnot_zero_r32_2, unittest_assert_isnot_zero_r64_2, unittest_assert_isnot_zero_c32_2, unittest_assert_isnot_zero_c64_2, unittest_assert_isnot_zero_i8_3, unittest_assert_isnot_zero_i16_3, unittest_assert_isnot_zero_i32_3, unittest_assert_isnot_zero_i64_3, unittest_assert_isnot_zero_r32_3, unittest_assert_isnot_zero_r64_3, unittest_assert_isnot_zero_c32_3, unittest_assert_isnot_zero_c64_3 generic, public :: assert_less => unittest_assert_less_i8_00, unittest_assert_less_i16_00, unittest_assert_less_i32_00, unittest_assert_less_i64_00, unittest_assert_less_r32_00, unittest_assert_less_r64_00, unittest_assert_less_i8_01, unittest_assert_less_i16_01, unittest_assert_less_i32_01, unittest_assert_less_i64_01, unittest_assert_less_r32_01, unittest_assert_less_r64_01, unittest_assert_less_i8_10, unittest_assert_less_i16_10, unittest_assert_less_i32_10, unittest_assert_less_i64_10, unittest_assert_less_r32_10, unittest_assert_less_r64_10, unittest_assert_less_i8_11, unittest_assert_less_i16_11, unittest_assert_less_i32_11, unittest_assert_less_i64_11, unittest_assert_less_r32_11, unittest_assert_less_r64_11 generic, public :: assert_less_equal => unittest_assert_less_equal_i8_00, unittest_assert_less_equal_i16_00, unittest_assert_less_equal_i32_00, unittest_assert_less_equal_i64_00, unittest_assert_less_equal_r32_00, unittest_assert_less_equal_r64_00, unittest_assert_less_equal_i8_01, unittest_assert_less_equal_i16_01, unittest_assert_less_equal_i32_01, unittest_assert_less_equal_i64_01, unittest_assert_less_equal_r32_01, unittest_assert_less_equal_r64_01, unittest_assert_less_equal_i8_10, unittest_assert_less_equal_i16_10, unittest_assert_less_equal_i32_10, unittest_assert_less_equal_i64_10, unittest_assert_less_equal_r32_10, unittest_assert_less_equal_r64_10, unittest_assert_less_equal_i8_11, unittest_assert_less_equal_i16_11, unittest_assert_less_equal_i32_11, unittest_assert_less_equal_i64_11, unittest_assert_less_equal_r32_11, unittest_assert_less_equal_r64_11 generic, public :: assert_not_allclose => unittest_assert_not_allclose_r32_00, unittest_assert_not_allclose_r64_00, unittest_assert_not_allclose_c32_00, unittest_assert_not_allclose_c64_00, unittest_assert_not_allclose_r32_11, unittest_assert_not_allclose_r64_11, unittest_assert_not_allclose_c32_11, unittest_assert_not_allclose_c64_11, unittest_assert_not_allclose_r32_22, unittest_assert_not_allclose_r64_22, unittest_assert_not_allclose_c32_22, unittest_assert_not_allclose_c64_22, unittest_assert_not_allclose_r32_33, unittest_assert_not_allclose_r64_33, unittest_assert_not_allclose_c32_33, unittest_assert_not_allclose_c64_33, unittest_assert_not_allclose_r32_44, unittest_assert_not_allclose_r64_44, unittest_assert_not_allclose_c32_44, unittest_assert_not_allclose_c64_44, unittest_assert_not_allclose_r32_01, unittest_assert_not_allclose_r64_01, unittest_assert_not_allclose_c32_01, unittest_assert_not_allclose_c64_01, unittest_assert_not_allclose_r32_02, unittest_assert_not_allclose_r64_02, unittest_assert_not_allclose_c32_02, unittest_assert_not_allclose_c64_02, unittest_assert_not_allclose_r32_03, unittest_assert_not_allclose_r64_03, unittest_assert_not_allclose_c32_03, unittest_assert_not_allclose_c64_03, unittest_assert_not_allclose_r32_04, unittest_assert_not_allclose_r64_04, unittest_assert_not_allclose_c32_04, unittest_assert_not_allclose_c64_04, unittest_assert_not_allclose_r32_10, unittest_assert_not_allclose_r64_10, unittest_assert_not_allclose_c32_10, unittest_assert_not_allclose_c64_10, unittest_assert_not_allclose_r32_20, unittest_assert_not_allclose_r64_20, unittest_assert_not_allclose_c32_20, unittest_assert_not_allclose_c64_20, unittest_assert_not_allclose_r32_30, unittest_assert_not_allclose_r64_30, unittest_assert_not_allclose_c32_30, unittest_assert_not_allclose_c64_30, unittest_assert_not_allclose_r32_40, unittest_assert_not_allclose_r64_40, unittest_assert_not_allclose_c32_40, unittest_assert_not_allclose_c64_40 generic, public :: assert_not_almost_equal => unittest_assert_not_almost_equal_i8_00, unittest_assert_not_almost_equal_i16_00, unittest_assert_not_almost_equal_i32_00, unittest_assert_not_almost_equal_i64_00, unittest_assert_not_almost_equal_r32_00, unittest_assert_not_almost_equal_r64_00, unittest_assert_not_almost_equal_c32_00, unittest_assert_not_almost_equal_c64_00, unittest_assert_not_almost_equal_i8_11, unittest_assert_not_almost_equal_i16_11, unittest_assert_not_almost_equal_i32_11, unittest_assert_not_almost_equal_i64_11, unittest_assert_not_almost_equal_r32_11, unittest_assert_not_almost_equal_r64_11, unittest_assert_not_almost_equal_c32_11, unittest_assert_not_almost_equal_c64_11, unittest_assert_not_almost_equal_i8_22, unittest_assert_not_almost_equal_i16_22, unittest_assert_not_almost_equal_i32_22, unittest_assert_not_almost_equal_i64_22, unittest_assert_not_almost_equal_r32_22, unittest_assert_not_almost_equal_r64_22, unittest_assert_not_almost_equal_c32_22, unittest_assert_not_almost_equal_c64_22, unittest_assert_not_almost_equal_i8_33, unittest_assert_not_almost_equal_i16_33, unittest_assert_not_almost_equal_i32_33, unittest_assert_not_almost_equal_i64_33, unittest_assert_not_almost_equal_r32_33, unittest_assert_not_almost_equal_r64_33, unittest_assert_not_almost_equal_c32_33, unittest_assert_not_almost_equal_c64_33, unittest_assert_not_almost_equal_i8_44, unittest_assert_not_almost_equal_i16_44, unittest_assert_not_almost_equal_i32_44, unittest_assert_not_almost_equal_i64_44, unittest_assert_not_almost_equal_r32_44, unittest_assert_not_almost_equal_r64_44, unittest_assert_not_almost_equal_c32_44, unittest_assert_not_almost_equal_c64_44, unittest_assert_not_almost_equal_i8_01, unittest_assert_not_almost_equal_i16_01, unittest_assert_not_almost_equal_i32_01, unittest_assert_not_almost_equal_i64_01, unittest_assert_not_almost_equal_r32_01, unittest_assert_not_almost_equal_r64_01, unittest_assert_not_almost_equal_c32_01, unittest_assert_not_almost_equal_c64_01, unittest_assert_not_almost_equal_i8_02, unittest_assert_not_almost_equal_i16_02, unittest_assert_not_almost_equal_i32_02, unittest_assert_not_almost_equal_i64_02, unittest_assert_not_almost_equal_r32_02, unittest_assert_not_almost_equal_r64_02, unittest_assert_not_almost_equal_c32_02, unittest_assert_not_almost_equal_c64_02, unittest_assert_not_almost_equal_i8_03, unittest_assert_not_almost_equal_i16_03, unittest_assert_not_almost_equal_i32_03, unittest_assert_not_almost_equal_i64_03, unittest_assert_not_almost_equal_r32_03, unittest_assert_not_almost_equal_r64_03, unittest_assert_not_almost_equal_c32_03, unittest_assert_not_almost_equal_c64_03, unittest_assert_not_almost_equal_i8_04, unittest_assert_not_almost_equal_i16_04, unittest_assert_not_almost_equal_i32_04, unittest_assert_not_almost_equal_i64_04, unittest_assert_not_almost_equal_r32_04, unittest_assert_not_almost_equal_r64_04, unittest_assert_not_almost_equal_c32_04, unittest_assert_not_almost_equal_c64_04, unittest_assert_not_almost_equal_i8_10, unittest_assert_not_almost_equal_i16_10, unittest_assert_not_almost_equal_i32_10, unittest_assert_not_almost_equal_i64_10, unittest_assert_not_almost_equal_r32_10, unittest_assert_not_almost_equal_r64_10, unittest_assert_not_almost_equal_c32_10, unittest_assert_not_almost_equal_c64_10, unittest_assert_not_almost_equal_i8_20, unittest_assert_not_almost_equal_i16_20, unittest_assert_not_almost_equal_i32_20, unittest_assert_not_almost_equal_i64_20, unittest_assert_not_almost_equal_r32_20, unittest_assert_not_almost_equal_r64_20, unittest_assert_not_almost_equal_c32_20, unittest_assert_not_almost_equal_c64_20, unittest_assert_not_almost_equal_i8_30, unittest_assert_not_almost_equal_i16_30, unittest_assert_not_almost_equal_i32_30, unittest_assert_not_almost_equal_i64_30, unittest_assert_not_almost_equal_r32_30, unittest_assert_not_almost_equal_r64_30, unittest_assert_not_almost_equal_c32_30, unittest_assert_not_almost_equal_c64_30, unittest_assert_not_almost_equal_i8_40, unittest_assert_not_almost_equal_i16_40, unittest_assert_not_almost_equal_i32_40, unittest_assert_not_almost_equal_i64_40, unittest_assert_not_almost_equal_r32_40, unittest_assert_not_almost_equal_r64_40, unittest_assert_not_almost_equal_c32_40, unittest_assert_not_almost_equal_c64_40 generic, public :: assert_not_equal => unittest_assert_not_equal_i8_00, unittest_assert_not_equal_i16_00, unittest_assert_not_equal_i32_00, unittest_assert_not_equal_i64_00, unittest_assert_not_equal_logical_00, unittest_assert_not_equal_i8_11, unittest_assert_not_equal_i16_11, unittest_assert_not_equal_i32_11, unittest_assert_not_equal_i64_11, unittest_assert_not_equal_logical_11, unittest_assert_not_equal_i8_22, unittest_assert_not_equal_i16_22, unittest_assert_not_equal_i32_22, unittest_assert_not_equal_i64_22, unittest_assert_not_equal_logical_22, unittest_assert_not_equal_i8_33, unittest_assert_not_equal_i16_33, unittest_assert_not_equal_i32_33, unittest_assert_not_equal_i64_33, unittest_assert_not_equal_logical_33, unittest_assert_not_equal_i8_44, unittest_assert_not_equal_i16_44, unittest_assert_not_equal_i32_44, unittest_assert_not_equal_i64_44, unittest_assert_not_equal_logical_44, unittest_assert_not_equal_i8_01, unittest_assert_not_equal_i16_01, unittest_assert_not_equal_i32_01, unittest_assert_not_equal_i64_01, unittest_assert_not_equal_logical_01, unittest_assert_not_equal_i8_02, unittest_assert_not_equal_i16_02, unittest_assert_not_equal_i32_02, unittest_assert_not_equal_i64_02, unittest_assert_not_equal_logical_02, unittest_assert_not_equal_i8_03, unittest_assert_not_equal_i16_03, unittest_assert_not_equal_i32_03, unittest_assert_not_equal_i64_03, unittest_assert_not_equal_logical_03, unittest_assert_not_equal_i8_04, unittest_assert_not_equal_i16_04, unittest_assert_not_equal_i32_04, unittest_assert_not_equal_i64_04, unittest_assert_not_equal_logical_04, unittest_assert_not_equal_i8_10, unittest_assert_not_equal_i16_10, unittest_assert_not_equal_i32_10, unittest_assert_not_equal_i64_10, unittest_assert_not_equal_logical_10, unittest_assert_not_equal_i8_20, unittest_assert_not_equal_i16_20, unittest_assert_not_equal_i32_20, unittest_assert_not_equal_i64_20, unittest_assert_not_equal_logical_20, unittest_assert_not_equal_i8_30, unittest_assert_not_equal_i16_30, unittest_assert_not_equal_i32_30, unittest_assert_not_equal_i64_30, unittest_assert_not_equal_logical_30, unittest_assert_not_equal_i8_40, unittest_assert_not_equal_i16_40, unittest_assert_not_equal_i32_40, unittest_assert_not_equal_i64_40, unittest_assert_not_equal_logical_40 generic, public :: assert_true => unittest_assert_true_logical_0, unittest_assert_true_logical_1, unittest_assert_true_logical_2, unittest_assert_true_logical_3 procedure, public :: finish => utest_finish procedure, public :: finish_and_terminate => utest_finish_and_terminate procedure, public :: init => utest_init","tags":"","loc":"module/mod_unittest.html"},{"title":"mod_kinds â€“ unittest","text":"Defines the available integer and floating-point precision. Uses iso_fortran_env module~~mod_kinds~~UsesGraph module~mod_kinds mod_kinds iso_fortran_env iso_fortran_env module~mod_kinds->iso_fortran_env Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~mod_kinds~~UsedByGraph module~mod_kinds mod_kinds module~mod_unittest mod_unittest module~mod_unittest->module~mod_kinds module~error_stop_08 error_stop_08 module~error_stop_08->module~mod_unittest module~compare compare module~compare->module~mod_unittest module~error_stop_f18 error_stop_f18 module~error_stop_f18->module~mod_unittest module~allclose allclose module~allclose->module~mod_unittest module~equal equal module~equal->module~mod_unittest module~bool bool module~bool->module~mod_unittest module~almost_equal almost_equal module~almost_equal->module~mod_unittest module~is_eye is_eye module~is_eye->module~mod_unittest module~is_zero is_zero module~is_zero->module~mod_unittest Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables DP SP Variables Type Visibility Attributes Name Initial integer, public, parameter :: DP = SELECTED_REAL_KIND(15) integer, public, parameter :: SP = SELECTED_REAL_KIND(6)","tags":"","loc":"module/mod_kinds.html"},{"title":"mod_unittest_printer â€“ unittest","text":"Module for unittest output Uses iso_fortran_env module~~mod_unittest_printer~~UsesGraph module~mod_unittest_printer mod_unittest_printer iso_fortran_env iso_fortran_env module~mod_unittest_printer->iso_fortran_env Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~mod_unittest_printer~~UsedByGraph module~mod_unittest_printer mod_unittest_printer module~compare compare module~compare->module~mod_unittest_printer module~bool bool module~bool->module~mod_unittest_printer module~allclose allclose module~allclose->module~mod_unittest_printer module~equal equal module~equal->module~mod_unittest_printer module~almost_equal almost_equal module~almost_equal->module~mod_unittest_printer module~is_zero is_zero module~is_zero->module~mod_unittest_printer module~is_eye is_eye module~is_eye->module~mod_unittest_printer Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Derived Types expr_report Subroutines check_expr_all check_expr_not_any check_rank Derived Types type, public, sequence  :: expr_report Subroutines public subroutine check_expr_all (dev, num_test, expr, unitname, num_error, err) Arguments Type Intent Optional Attributes Name integer, intent(in) :: dev integer, intent(in) :: num_test type( expr_report ), intent(in) :: expr (:) character, intent(in) :: unitname integer, intent(inout) :: num_error logical, intent(inout) :: err public subroutine check_expr_not_any (dev, num_test, expr, unitname, num_error, err) Arguments Type Intent Optional Attributes Name integer, intent(in) :: dev integer, intent(in) :: num_test type( expr_report ), intent(in) :: expr (:) character, intent(in) :: unitname integer, intent(inout) :: num_error logical, intent(inout) :: err public subroutine check_rank (dev, num_test, size_a, size_b, unitname, num_error, err) Arguments Type Intent Optional Attributes Name integer, intent(in) :: dev integer, intent(in) :: num_test integer, intent(in) :: size_a integer, intent(in) :: size_b character, intent(in) :: unitname integer, intent(inout) :: num_error logical, intent(inout) :: err","tags":"","loc":"module/mod_unittest_printer.html"},{"title":"almost_equal â€“ unittest","text":"Uses mod_unittest_printer Ancestors: mod_unittest module~~almost_equal~~UsesGraph module~almost_equal almost_equal module~mod_unittest_printer mod_unittest_printer module~almost_equal->module~mod_unittest_printer module~mod_unittest mod_unittest module~almost_equal->module~mod_unittest iso_fortran_env iso_fortran_env module~mod_unittest_printer->iso_fortran_env module~mod_unittest->iso_fortran_env module~mod_kinds mod_kinds module~mod_unittest->module~mod_kinds module~mod_kinds->iso_fortran_env Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/almost_equal.html"},{"title":"error_stop_08 â€“ unittest","text":"Uses Ancestors: mod_unittest module~~error_stop_08~~UsesGraph module~error_stop_08 error_stop_08 module~mod_unittest mod_unittest module~error_stop_08->module~mod_unittest module~mod_kinds mod_kinds module~mod_unittest->module~mod_kinds iso_fortran_env iso_fortran_env module~mod_unittest->iso_fortran_env module~mod_kinds->iso_fortran_env Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/error_stop_08.html"},{"title":"allclose â€“ unittest","text":"Uses mod_unittest_printer Ancestors: mod_unittest module~~allclose~~UsesGraph module~allclose allclose module~mod_unittest_printer mod_unittest_printer module~allclose->module~mod_unittest_printer module~mod_unittest mod_unittest module~allclose->module~mod_unittest iso_fortran_env iso_fortran_env module~mod_unittest_printer->iso_fortran_env module~mod_unittest->iso_fortran_env module~mod_kinds mod_kinds module~mod_unittest->module~mod_kinds module~mod_kinds->iso_fortran_env Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/allclose.html"},{"title":"is_eye â€“ unittest","text":"Uses mod_unittest_printer Ancestors: mod_unittest module~~is_eye~~UsesGraph module~is_eye is_eye module~mod_unittest_printer mod_unittest_printer module~is_eye->module~mod_unittest_printer module~mod_unittest mod_unittest module~is_eye->module~mod_unittest iso_fortran_env iso_fortran_env module~mod_unittest_printer->iso_fortran_env module~mod_unittest->iso_fortran_env module~mod_kinds mod_kinds module~mod_unittest->module~mod_kinds module~mod_kinds->iso_fortran_env Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/is_eye.html"},{"title":"is_zero â€“ unittest","text":"Uses mod_unittest_printer Ancestors: mod_unittest module~~is_zero~~UsesGraph module~is_zero is_zero module~mod_unittest_printer mod_unittest_printer module~is_zero->module~mod_unittest_printer module~mod_unittest mod_unittest module~is_zero->module~mod_unittest iso_fortran_env iso_fortran_env module~mod_unittest_printer->iso_fortran_env module~mod_unittest->iso_fortran_env module~mod_kinds mod_kinds module~mod_unittest->module~mod_kinds module~mod_kinds->iso_fortran_env Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/is_zero.html"},{"title":"compare â€“ unittest","text":"Uses mod_unittest_printer Ancestors: mod_unittest module~~compare~~UsesGraph module~compare compare module~mod_unittest_printer mod_unittest_printer module~compare->module~mod_unittest_printer module~mod_unittest mod_unittest module~compare->module~mod_unittest iso_fortran_env iso_fortran_env module~mod_unittest_printer->iso_fortran_env module~mod_unittest->iso_fortran_env module~mod_kinds mod_kinds module~mod_unittest->module~mod_kinds module~mod_kinds->iso_fortran_env Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/compare.html"},{"title":"equal â€“ unittest","text":"Uses mod_unittest_printer Ancestors: mod_unittest module~~equal~~UsesGraph module~equal equal module~mod_unittest_printer mod_unittest_printer module~equal->module~mod_unittest_printer module~mod_unittest mod_unittest module~equal->module~mod_unittest iso_fortran_env iso_fortran_env module~mod_unittest_printer->iso_fortran_env module~mod_unittest->iso_fortran_env module~mod_kinds mod_kinds module~mod_unittest->module~mod_kinds module~mod_kinds->iso_fortran_env Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/equal.html"},{"title":"error_stop_f18 â€“ unittest","text":"Uses Ancestors: mod_unittest module~~error_stop_f18~~UsesGraph module~error_stop_f18 error_stop_f18 module~mod_unittest mod_unittest module~error_stop_f18->module~mod_unittest module~mod_kinds mod_kinds module~mod_unittest->module~mod_kinds iso_fortran_env iso_fortran_env module~mod_unittest->iso_fortran_env module~mod_kinds->iso_fortran_env Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/error_stop_f18.html"},{"title":"bool â€“ unittest","text":"Uses mod_unittest_printer Ancestors: mod_unittest module~~bool~~UsesGraph module~bool bool module~mod_unittest_printer mod_unittest_printer module~bool->module~mod_unittest_printer module~mod_unittest mod_unittest module~bool->module~mod_unittest iso_fortran_env iso_fortran_env module~mod_unittest_printer->iso_fortran_env module~mod_unittest->iso_fortran_env module~mod_kinds mod_kinds module~mod_unittest->module~mod_kinds module~mod_kinds->iso_fortran_env Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/bool.html"},{"title":"mod_unittest.fypp â€“ unittest","text":"This file depends on sourcefile~~mod_unittest.fypp~~EfferentGraph sourcefile~mod_unittest.fypp mod_unittest.fypp sourcefile~mod_kinds.fypp mod_kinds.fypp sourcefile~mod_unittest.fypp->sourcefile~mod_kinds.fypp Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~mod_unittest.fypp~~AfferentGraph sourcefile~mod_unittest.fypp mod_unittest.fypp sourcefile~almost_equal.fypp almost_equal.fypp sourcefile~almost_equal.fypp->sourcefile~mod_unittest.fypp sourcefile~error_stop_f08.fypp error_stop_f08.fypp sourcefile~error_stop_f08.fypp->sourcefile~mod_unittest.fypp sourcefile~allclose.fypp allclose.fypp sourcefile~allclose.fypp->sourcefile~mod_unittest.fypp sourcefile~compare.fypp compare.fypp sourcefile~compare.fypp->sourcefile~mod_unittest.fypp sourcefile~is_eye.fypp is_eye.fypp sourcefile~is_eye.fypp->sourcefile~mod_unittest.fypp sourcefile~is_zero.fypp is_zero.fypp sourcefile~is_zero.fypp->sourcefile~mod_unittest.fypp sourcefile~equal.fypp equal.fypp sourcefile~equal.fypp->sourcefile~mod_unittest.fypp sourcefile~error_stop_f18.fypp error_stop_f18.fypp sourcefile~error_stop_f18.fypp->sourcefile~mod_unittest.fypp sourcefile~bool.fypp bool.fypp sourcefile~bool.fypp->sourcefile~mod_unittest.fypp Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules mod_unittest Source Code mod_unittest.fypp Source Code #:include \"common.fypp\" module mod_unittest !! Fortran unit testing framework. !  This module provides an interface class to the assert method. use , intrinsic :: ISO_FORTRAN_ENV , only : STDOUT => OUTPUT_UNIT , & & STDERR => ERROR_UNIT , & & RK => REAL64 use mod_kinds implicit none private public :: unittest ! character ( * ), parameter :: SEP1 = REPEAT ( '-' , 64 ) character ( * ), parameter :: SEP2 = REPEAT ( '=' , 64 ) ! type unittest private integer :: dev integer :: num_test integer :: num_error integer :: start_time real ( RK ) :: start_cpu_time character (:), allocatable :: script_name logical :: terminate_with_error_code = . true . contains procedure :: init => utest_init #:for routine in [\"assert\", \"assert_true\", \"assert_false\"] ${ generic_procedure ( routine , LOGICAL_KIND_TYPE_POSTS , [( rank , None ) for rank in range ( 4 )]) }$ #:endfor #:for routine in [\"assert_equal\", \"assert_not_equal\"] ${ generic_procedure ( routine , INTEGER_KIND_TYPE_POSTS + LOGICAL_KIND_TYPE_POSTS , [( 0 , 0 ), ( 1 , 1 ), ( 2 , 2 ), ( 3 , 3 ), ( 4 , 4 ), ( 0 , 1 ), ( 0 , 2 ), ( 0 , 3 ), ( 0 , 4 ), ( 1 , 0 ), ( 2 , 0 ), ( 3 , 0 ), ( 4 , 0 )]) }$ #:endfor #:for routine in [\"assert_almost_equal\", \"assert_not_almost_equal\"] ${ generic_procedure ( routine , INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS , [( 0 , 0 ), ( 1 , 1 ), ( 2 , 2 ), ( 3 , 3 ), ( 4 , 4 ), ( 0 , 1 ), ( 0 , 2 ), ( 0 , 3 ), ( 0 , 4 ), ( 1 , 0 ), ( 2 , 0 ), ( 3 , 0 ), ( 4 , 0 )]) }$ #:endfor #:for routine in [\"assert_less\", \"assert_less_equal\", \"assert_greater\", \"assert_greater_equal\"] ${ generic_procedure ( routine , INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS , [( 0 , 0 ), ( 0 , 1 ), ( 1 , 0 ), ( 1 , 1 )]) }$ #:endfor #:for routine in [\"assert_is_eye\", \"assert_isnot_eye\"] ${ generic_procedure ( routine , INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS , [( 2 , None )]) }$ #:endfor #:for routine in [\"assert_is_zero\", \"assert_isnot_zero\"] ${ generic_procedure ( routine , INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS , [( rank , None ) for rank in range ( 4 )]) }$ #:endfor #:for routine in [\"assert_allclose\", \"assert_not_allclose\"] ${ generic_procedure ( routine , REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS , [( 0 , 0 ), ( 1 , 1 ), ( 2 , 2 ), ( 3 , 3 ), ( 4 , 4 ), ( 0 , 1 ), ( 0 , 2 ), ( 0 , 3 ), ( 0 , 4 ), ( 1 , 0 ), ( 2 , 0 ), ( 3 , 0 ), ( 4 , 0 )]) }$ #:endfor procedure :: finish => utest_finish procedure :: finish_and_terminate => utest_finish_and_terminate final :: utest_destroy end type unittest ! interface unittest module procedure :: utest_new end interface unittest ! interface module subroutine error_stop ( msg , code ) character ( * ), intent ( in ), optional :: msg integer , intent ( in ), optional :: code end subroutine error_stop ! #:for routine, cond in zip([\"assert\", \"assert_true\", \"assert_false\"], [\"ALL(expr)\", \"ALL(expr)\", \".not.ANY(expr)\"]) #:for rank in range(4) #:for kind, type, post in LOGICAL_KIND_TYPE_POSTS module subroutine ${ routine_name ( routine , post , rank ) }$ ( this , expr , unitname ) class ( unittest ), intent ( inout ) :: this ${ type }$ , intent ( in ) :: expr$ { rank_suffix ( rank ) }$ character ( * ), intent ( in ) :: unitname end subroutine ${ routine_name ( routine , post , rank ) }$ ! #:endfor #:endfor #:endfor #:for routine in [\"assert_equal\", \"assert_not_equal\"] #:for kind, type, post in INTEGER_KIND_TYPE_POSTS + LOGICAL_KIND_TYPE_POSTS #:for rank1, rank2 in [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (2, 0), (3, 0), (4, 0)] module subroutine ${ routine_name ( routine , post , rank1 , rank2 ) }$ ( this , a , b , unitname ) class ( unittest ), intent ( inout ) :: this ${ type }$ , intent ( in ) :: a$ { rank_suffix ( rank1 ) }$ , b$ { rank_suffix ( rank2 ) }$ character ( * ), intent ( in ) :: unitname end subroutine ${ routine_name ( routine , post , rank1 , rank2 ) }$ ! #:endfor #:endfor #:endfor #:for routine in [\"assert_almost_equal\", \"assert_not_almost_equal\"] #:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS #:for rank1, rank2 in [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (2, 0), (3, 0), (4, 0)] module subroutine ${ routine_name ( routine , post , rank1 , rank2 ) }$ ( this , a , b , unitname , place ) class ( unittest ), intent ( inout ) :: this ${ type }$ , intent ( in ) :: a$ { rank_suffix ( rank1 ) }$ , b$ { rank_suffix ( rank2 ) }$ character ( * ), intent ( in ) :: unitname integer , intent ( in ), optional :: place end subroutine ${ routine_name ( routine , post , rank1 , rank2 ) }$ ! #:endfor #:endfor #:endfor #:for routine, cond in zip([\"assert_less\", \"assert_less_equal\", \"assert_greater\", \"assert_greater_equal\"], [\"ALL(a<b)\", \"ALL(a<=b)\", \"ALL(a>b)\", \"ALL(a>=b)\"]) #:for rank2 in [0, 1] #:for rank1 in [0, 1] #:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS module subroutine ${ routine_name ( routine , post , rank1 , rank2 ) }$ ( this , a , b , unitname ) class ( unittest ), intent ( inout ) :: this ${ type }$ , intent ( in ) :: a$ { rank_suffix ( rank1 ) }$ ${ type }$ , intent ( in ) :: b$ { rank_suffix ( rank2 ) }$ character ( * ), intent ( in ) :: unitname end subroutine ${ routine_name ( routine , post , rank1 , rank2 ) }$ ! #:endfor #:endfor #:endfor #:endfor #:for routine in [\"assert_is_eye\", \"assert_isnot_eye\"] #:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS module subroutine ${ routine_name ( routine , post , 2 ) }$ ( this , a , unitname , place ) class ( unittest ), intent ( inout ) :: this ${ type }$ , intent ( in ) :: a$ { rank_suffix ( 2 ) }$ character ( * ), intent ( in ) :: unitname integer , intent ( in ), optional :: place end subroutine ${ routine_name ( routine , post , 2 ) }$ ! #:endfor #:endfor #:for routine in [\"assert_is_zero\", \"assert_isnot_zero\"] #:for kind, type, post in INTEGER_KIND_TYPE_POSTS + REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS #:for rank in range(4) module subroutine ${ routine_name ( routine , post , rank ) }$ ( this , a , unitname , place ) class ( unittest ), intent ( inout ) :: this ${ type }$ , intent ( in ) :: a$ { rank_suffix ( rank ) }$ character ( * ), intent ( in ) :: unitname integer , intent ( in ), optional :: place end subroutine ${ routine_name ( routine , post , rank ) }$ ! #:endfor #:endfor #:endfor #:for routine in [\"assert_allclose\", \"assert_not_allclose\"] #:for kind, type, post in REAL_KIND_TYPE_POSTS + COMPLEX_KIND_TYPE_POSTS #:for rank1, rank2 in [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (2, 0), (3, 0), (4, 0)] module subroutine ${ routine_name ( routine , post , rank1 , rank2 ) }$ ( this , a , b , unitname , rtol , atol ) class ( unittest ), intent ( inout ) :: this ${ type }$ , intent ( in ) :: a$ { rank_suffix ( rank1 ) }$ ${ type }$ , intent ( in ) :: b$ { rank_suffix ( rank2 ) }$ character ( * ), intent ( in ) :: unitname real ( ${ kind }$ ), intent ( in ), optional :: rtol real ( ${ kind }$ ), intent ( in ), optional :: atol end subroutine ${ routine_name ( routine , post , rank1 , rank2 ) }$ ! #:endfor #:endfor #:endfor end interface ! contains ! function utest_new ( section , terminate_with_error_code ) result ( res ) character ( * ), intent ( in ), optional :: section logical , intent ( in ), optional :: terminate_with_error_code type ( unittest ) :: res call utest_init ( res , section , terminate_with_error_code ) end function utest_new ! subroutine utest_init ( this , section , terminate_with_error_code ) class ( unittest ), intent ( inout ) :: this character ( * ), intent ( in ), optional :: section logical , intent ( in ), optional :: terminate_with_error_code integer :: lna , ios character (:), allocatable :: tmp call utest_destroy ( this ) ! call CPU_TIME ( this % start_cpu_time ) call SYSTEM_CLOCK ( this % start_time ) ! call GET_COMMAND_ARGUMENT ( 0 , length = lna , status = ios ) if ( ios /= 0 ) return ! this % dev = STDERR allocate ( character ( lna ) :: tmp ) allocate ( character ( 0 ) :: this % script_name ) call GET_COMMAND_ARGUMENT ( 0 , value = tmp , status = ios ) lna = INDEX ( tmp , '/' , . true .) + 1 this % script_name = tmp ( lna :) deallocate ( tmp ) ! write ( this % dev , '(A)' , err = 100 ) SEP2 write ( this % dev , '(A)' , err = 100 ) 'Test command :: ' // this % script_name if ( PRESENT ( section )) write ( this % dev , '(A)' , err = 100 ) '  Section ----> ' // section ! 100 return end subroutine utest_init ! subroutine utest_finish ( this ) class ( unittest ), intent ( inout ) :: this integer :: finish_time , t_rate , t_max real ( RK ) :: finish_cpu_time , time ! if (. not . ALLOCATED ( this % script_name )) return ! call SYSTEM_CLOCK ( finish_time , t_rate , t_max ) ! if ( finish_time < this % start_time ) then time = ( t_max - this % start_time + finish_time + 1 ) else time = ( finish_time - this % start_time ) end if ! call CPU_TIME ( finish_cpu_time ) ! finish_cpu_time = finish_cpu_time - this % start_cpu_time ! if ( this % num_test > 0 ) then write ( this % dev , '(A)' , err = 100 ) SEP1 write ( this % dev , '(A,I0,A,F9.3,A,F9.3,A)' , advance = 'NO' , err = 100 ) & & ' Run ' , this % num_test , ' tests in ' , time / DBLE ( t_rate ), ' / ' , & & finish_cpu_time , ' s (sys/cpu)----> ' if ( this % num_error < 1 ) then write ( this % dev , '(A,I0,A,F9.3,A)' , err = 100 ) 'Passed' else write ( this % dev , '(A,/,I12,A)' , err = 100 ) 'Failed, ' , this % num_error , ' error detected.' end if else write ( this % dev , '(A)' , err = 100 ) 'No Test executed' end if write ( this % dev , '(A)' , err = 100 ) SEP2 ! 100 FLUSH ( this % dev ) call utest_free ( this ) end subroutine utest_finish ! subroutine utest_finish_and_terminate ( this ) class ( unittest ), intent ( inout ) :: this call utest_destroy ( this ) if (. not . this % terminate_with_error_code ) return if ( this % num_error > 0 ) call error_stop ( 'TESTS WERE TERMINATED' , 1 ) end subroutine utest_finish_and_terminate ! pure subroutine utest_free ( this ) type ( unittest ), intent ( inout ) :: this if ( ALLOCATED ( this % script_name )) deallocate ( this % script_name ) this % num_test = 0 this % num_error = 0 this % terminate_with_error_code = . true . end subroutine utest_free ! subroutine utest_destroy ( this ) type ( unittest ), intent ( inout ) :: this if ( ALLOCATED ( this % script_name )) call this % finish () call utest_free ( this ) end subroutine utest_destroy ! end module mod_unittest","tags":"","loc":"sourcefile/mod_unittest.fypp.html"},{"title":"mod_kinds.fypp â€“ unittest","text":"Files dependent on this one sourcefile~~mod_kinds.fypp~~AfferentGraph sourcefile~mod_kinds.fypp mod_kinds.fypp sourcefile~mod_unittest.fypp mod_unittest.fypp sourcefile~mod_unittest.fypp->sourcefile~mod_kinds.fypp sourcefile~almost_equal.fypp almost_equal.fypp sourcefile~almost_equal.fypp->sourcefile~mod_unittest.fypp sourcefile~error_stop_f08.fypp error_stop_f08.fypp sourcefile~error_stop_f08.fypp->sourcefile~mod_unittest.fypp sourcefile~allclose.fypp allclose.fypp sourcefile~allclose.fypp->sourcefile~mod_unittest.fypp sourcefile~compare.fypp compare.fypp sourcefile~compare.fypp->sourcefile~mod_unittest.fypp sourcefile~is_eye.fypp is_eye.fypp sourcefile~is_eye.fypp->sourcefile~mod_unittest.fypp sourcefile~is_zero.fypp is_zero.fypp sourcefile~is_zero.fypp->sourcefile~mod_unittest.fypp sourcefile~equal.fypp equal.fypp sourcefile~equal.fypp->sourcefile~mod_unittest.fypp sourcefile~error_stop_f18.fypp error_stop_f18.fypp sourcefile~error_stop_f18.fypp->sourcefile~mod_unittest.fypp sourcefile~bool.fypp bool.fypp sourcefile~bool.fypp->sourcefile~mod_unittest.fypp Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules mod_kinds Source Code mod_kinds.fypp Source Code #:include \"common.fypp\" module mod_kinds !! Defines the available integer and floating-point precision. use , intrinsic :: ISO_FORTRAN_ENV , only : INT8 , INT16 , INT32 , INT64 implicit none private public :: INT8 , INT16 , INT32 , INT64 public :: SP , DP #:if XDP_SUPPORT public :: XDP #:endif #:if QP_SUPPORT public :: QP #:endif #:if HP_SUPPORT public :: HP #:endif integer , parameter :: SP = SELECTED_REAL_KIND ( 6 ) integer , parameter :: DP = SELECTED_REAL_KIND ( 15 ) #:if XDP_SUPPORT integer , parameter :: XDP = SELECTED_REAL_KIND ( 18 ) #:endif #:if QP_SUPPORT integer , parameter :: QP = SELECTED_REAL_KIND ( 33 ) #:endif #:if HP_SUPPORT integer , parameter :: HP = SELECTED_REAL_KIND ( 3 ) #:endif end module mod_kinds","tags":"","loc":"sourcefile/mod_kinds.fypp.html"},{"title":"mod_unittest_printer.f90 â€“ unittest","text":"Files dependent on this one sourcefile~~mod_unittest_printer.f90~~AfferentGraph sourcefile~mod_unittest_printer.f90 mod_unittest_printer.f90 sourcefile~almost_equal.fypp almost_equal.fypp sourcefile~almost_equal.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~allclose.fypp allclose.fypp sourcefile~allclose.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~compare.fypp compare.fypp sourcefile~compare.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~is_zero.fypp is_zero.fypp sourcefile~is_zero.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~is_eye.fypp is_eye.fypp sourcefile~is_eye.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~equal.fypp equal.fypp sourcefile~equal.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~bool.fypp bool.fypp sourcefile~bool.fypp->sourcefile~mod_unittest_printer.f90 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules mod_unittest_printer Source Code mod_unittest_printer.f90 Source Code module mod_unittest_printer !! Module for unittest output use , intrinsic :: ISO_FORTRAN_ENV , only : RK => REAL64 implicit none private public :: expr_report public :: check_rank public :: check_expr_all public :: check_expr_not_any !<& integer , parameter :: L_MSG = 56 integer , parameter :: L_WDH = L_MSG - 12 character ( * ), parameter :: ESC = ACHAR ( z '1b' ) // \"[\" ! integer , parameter :: NCMAP = 21 character ( * ), parameter :: CDIV ( NCMAP ) = [ \"164\" , \"129\" , \"093\" , \"092\" , \"056\" , & & \"055\" , \"054\" , \"236\" , \"234\" , \"232\" , & & \"000\" , \"232\" , \"234\" , \"022\" , \"023\" , & & \"031\" , \"037\" , \"036\" , \"041\" , \"046\" , & & \"118\" ] ! character(*), parameter :: CDIV(NCMAP)   = [\"165\", \"129\", \"093\", \"057\", \"021\", & !                          &                  \"020\", \"019\", \"018\", \"017\", \"016\", & !                          &                  \"000\", \"052\", \"088\", \"124\", \"160\", & !                          &                  \"196\", \"202\", \"208\", \"214\", \"220\", & !                          &                  \"226\"] character ( * ), parameter :: CSEQ ( NCMAP ) = [ \"232\" , \"233\" , \"234\" , \"235\" , \"236\" , & & \"237\" , \"238\" , \"239\" , \"240\" , \"241\" , & & \"242\" , \"243\" , \"244\" , \"245\" , \"246\" , & & \"247\" , \"248\" , \"249\" , \"251\" , \"253\" , & & \"255\" ] character ( * ), parameter :: CSEQ_R ( NCMAP ) = [ \"255\" , \"253\" , \"251\" , \"249\" , \"248\" , & & \"247\" , \"246\" , \"245\" , \"244\" , \"243\" , & & \"242\" , \"241\" , \"240\" , \"239\" , \"238\" , & & \"237\" , \"236\" , \"235\" , \"234\" , \"233\" , & & \"232\" ] character ( * ), parameter :: RESET = Esc // 'm' character ( * ), parameter :: WSPC = REPEAT ( ' ' , 8 ) character ( * ), parameter :: SEP3 = WSPC // REPEAT ( '-' , L_MSG ) character ( * ), parameter :: rankMissMatch = WSPC // '  Rank MissMatch : ' character ( * ), parameter :: ErrorRateIs = WSPC // '  Error rate is  : ' !&> type expr_report sequence logical :: ok real ( RK ) :: error_rate character ( L_MSG ) :: msg end type expr_report ! contains subroutine check_rank ( dev , num_test , size_a , size_b , unitname , num_error , err ) !! integer , intent ( in ) :: dev integer , intent ( in ) :: num_test integer , intent ( in ) :: size_a integer , intent ( in ) :: size_b character ( * ), intent ( in ) :: unitname integer , intent ( inout ) :: num_error logical , intent ( inout ) :: err integer :: ios err = size_a /= size_b ; if (. not . err ) return num_error = num_error + 1 write ( dev , '(I8,A)' , IOSTAT = ios ) num_test , padd_string ( unitname , '... failed' , L_WDH ) write ( dev , '(A)' , IOSTAT = ios ) SEP3 write ( dev , '(2A,I0,A,I0,A)' , IOSTAT = ios ) rankMissMatch , '[' , size_a , '] /= [' , size_b , ']' write ( dev , '(A)' , IOSTAT = ios ) SEP3 FLUSH ( dev ) end subroutine check_rank ! subroutine check_expr_all ( dev , num_test , expr , unitname , num_error , err ) integer , intent ( in ) :: dev integer , intent ( in ) :: num_test type ( expr_report ), intent ( in ) :: expr (:) character ( * ), intent ( in ) :: unitname integer , intent ( inout ) :: num_error logical , intent ( inout ) :: err err = . not . ALL ( expr % ok ) if ( err ) num_error = num_error + 1 call report_result ( dev , num_test , err , expr , unitname ) end subroutine check_expr_all ! subroutine check_expr_not_any ( dev , num_test , expr , unitname , num_error , err ) integer , intent ( in ) :: dev integer , intent ( in ) :: num_test type ( expr_report ), intent ( in ) :: expr (:) character ( * ), intent ( in ) :: unitname integer , intent ( inout ) :: num_error logical , intent ( inout ) :: err err = ANY ( expr % ok ) if ( err ) num_error = num_error + 1 call report_result ( dev , num_test , err , expr , unitname ) end subroutine check_expr_not_any ! subroutine report_result ( dev , num_test , err , expr , unitname ) integer , intent ( in ) :: dev integer , intent ( in ) :: num_test logical , intent ( in ) :: err type ( expr_report ), intent ( in ) :: expr (:) character ( * ), intent ( in ) :: unitname real ( RK ) :: error_rate integer :: i , nerror , ntest , ios if ( err ) then write ( dev , '(I8,A)' , IOSTAT = ios ) num_test , padd_string ( unitname , '... failed' , L_WDH ) else write ( dev , '(I8,A)' , IOSTAT = ios ) num_test , padd_string ( unitname , '... OK' , L_WDH ) return end if ! ntest = SIZE ( expr ) ! write ( dev , '(A)' , IOSTAT = ios ) SEP3 nerror = COUNT (. not . expr % ok ) ! if ( ntest < 100 ) then do i = 1 , ntest if ( expr ( i )% ok ) cycle write ( dev , '(3X,I8,1X,A)' , IOSTAT = ios ) i , TRIM ( expr ( i )% msg ) end do else call report_as_image ( dev , ntest , expr % error_rate ) end if ! if ( ntest > 1 ) then error_rate = 10 0.0_RK * real ( nerror , RK ) / real ( ntest , RK ) write ( dev , '(A)' , IOSTAT = ios ) SEP3 write ( dev , '(A,f7.3,A,I0,A,I0,A)' , IOSTAT = ios ) & & ErrorRateIs , error_rate , ' %  ( ' , nerror , ' / ' , ntest , ' )' end if ! FLUSH ( dev ) end subroutine report_result ! pure function padd_string ( s , post , nline ) result ( res ) character ( * ), intent ( in ) :: s character ( * ), intent ( in ) :: post integer , intent ( in ) :: nline character (:), allocatable :: res integer :: npad npad = MAX ( 0 , nline - LEN_TRIM ( s )) res = ' ' // TRIM ( s ) // REPEAT ( ' ' , npad ) // post end function padd_string ! subroutine report_as_image ( dev , ndat , error_rate ) integer , intent ( in ) :: dev , ndat real ( RK ), intent ( in ) :: error_rate ( ndat ) real ( RK ) :: mmax integer :: nmap nmap = SIZE ( error_rate ) mmax = MAXVAL ( ABS ( error_rate )) if ( ALL ( error_rate >= 0.0_RK )) then call dump_image ( dev , ndat , SIZE ( CSEQ ), 100 , error_rate , 0.0_RK , mmax , CSEQ ) elseif ( ALL ( error_rate <= 0.0_RK )) then call dump_image ( dev , ndat , SIZE ( CSEQ_R ), 100 , error_rate , - mmax , 0.0_RK , CSEQ_R ) else call dump_image ( dev , ndat , SIZE ( CDIV ), 100 , error_rate , - mmax , mmax , CDIV ) end if end subroutine report_as_image ! subroutine dump_image ( dev , ndat , nmap , nbreak , dat , mmin , mmax , cmap ) integer , intent ( in ) :: dev , ndat , nmap , nbreak real ( RK ), intent ( in ) :: dat ( ndat ), mmin , mmax character ( * ), intent ( in ) :: cmap (:) real ( RK ) :: norm integer :: i , j , k1 , k2 , n , ios norm = ( nmap - 1 ) / ( mmax - mmin ) write ( dev , '(14X,G12.3,A,G12.3)' , IOSTAT = ios ) mmin , cbar ( cmap ), mmax do i = 1 , ndat , nbreak n = MIN ( i + nbreak - 1 , ndat ) write ( dev , '(I6,A,I6, 1X)' , ADVANCE = \"NO\" , IOSTAT = ios ) i , \"-\" , n do j = i + 1 , n , 2 k1 = NINT ( norm * ( dat ( j - 1 ) - mmin )) + 1 k2 = NINT ( norm * ( dat ( j - 0 ) - mmin )) + 1 write ( dev , '(A)' , ADVANCE = \"NO\" , IOSTAT = ios ) cset ( cmap ( k1 ), cmap ( k2 )) // \"â–Œ\" end do if ( MODULO ( n , 2 ) == 1 ) then k1 = NINT ( norm * ( dat ( n ) - mmin )) + 1 write ( dev , '(A)' , ADVANCE = \"NO\" , IOSTAT = ios ) cset ( cmap ( k1 )) // \"â–Œ\" end if write ( dev , '(A)' , IOSTAT = ios ) RESET end do end subroutine dump_image ! pure function cset ( C1 , C2 ) result ( res ) character ( * ), intent ( in ) :: C1 character ( * ), intent ( in ), optional :: C2 integer , parameter :: LCSET = LEN ( ESC // \"38;5;000;48;5;000m\" ) character ( LCSET ) :: res if ( PRESENT ( C2 )) then res = ESC // \"38;5;\" // C1 // \";48;5;\" // C2 // \"m\" else res = ESC // \"38;5;\" // C1 // \";48;5;000m\" end if end function cset ! pure function cbar ( cmap ) result ( res ) character ( * ), intent ( in ) :: cmap (:) character (:), allocatable :: res integer :: i , n res = \"\" n = SIZE ( cmap ) do i = 2 , n , 2 res = res // cset ( cmap ( i - 1 ), cmap ( i )) // \"â–Œ\" end do if ( MODULO ( n , 2 ) == 1 ) then res = res // cset ( cmap ( n ), \"000\" ) // \"â–Œ\" endif res = res // RESET end function cbar ! end module mod_unittest_printer","tags":"","loc":"sourcefile/mod_unittest_printer.f90.html"},{"title":"almost_equal.fypp â€“ unittest","text":"This file depends on sourcefile~~almost_equal.fypp~~EfferentGraph sourcefile~almost_equal.fypp almost_equal.fypp sourcefile~mod_unittest.fypp mod_unittest.fypp sourcefile~almost_equal.fypp->sourcefile~mod_unittest.fypp sourcefile~mod_unittest_printer.f90 mod_unittest_printer.f90 sourcefile~almost_equal.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~mod_kinds.fypp mod_kinds.fypp sourcefile~mod_unittest.fypp->sourcefile~mod_kinds.fypp Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules almost_equal Source Code almost_equal.fypp Source Code #:include \"common.fypp\" submodule ( mod_unittest ) almost_equal use mod_unittest_printer implicit none integer , parameter :: DEF_MP = 10 ** 7 contains #:set fmts = [\"(A,I14,2X,A,I14,2X,A)\", \"(A,G16.9,A,G16.9,A)\", \"(A,2(ES9.2,1X),A,2(ES9.2,1X),A)\"] #:set ktps = [ INTEGER_KIND_TYPE_POSTS, REAL_KIND_TYPE_POSTS, COMPLEX_KIND_TYPE_POSTS] #:for ktp, fm in zip(ktps, fmts) #:for kind, type, post in ktp #:for routine, op, neq in zip([\"assert_almost_equal\", \"assert_not_almost_equal\"], [\"<\", \">=\"], [\"\\~\", \"~ \"]) #:for rank1, rank2 in [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (2, 0), (3, 0), (4, 0)] module procedure ${ routine_name ( routine , post , rank1 , rank2 ) }$ logical err ${ rank_check ( rank1 , rank2 ) }$ call check_expr_all ( this % dev , this % num_test , ${ flatten ( routine + \"_\" + post + \"(a, b, place)\" , rank1 , rank2 ) }$ , & & unitname , this % num_error , err ) end procedure ${ routine_name ( routine , post , rank1 , rank2 ) }$ ! #:endfor pure elemental function ${ routine }$_${ post }$ ( a , b , place ) result ( res ) ${ type }$ , intent ( in ) :: a , b integer , intent ( in ), optional :: place real ( RK ) :: diff type ( expr_report ) :: res diff = ABS ( a - b ) if ( PRESENT ( place )) then ; diff = diff * 10 ** place else ; diff = diff * DEF_MP end if res % ok = INT ( diff ) ${ op }$ 1 if ( res % ok ) then res % msg = \"\" else write ( res % msg , '${fm}$' ) \"[\" , a , \"]${neq}$[\" , b , \"]\" end if res % error_rate = real ( a - b , RK ) end function ${ routine }$_${ post }$ ! #:endfor #:endfor #:endfor end submodule almost_equal","tags":"","loc":"sourcefile/almost_equal.fypp.html"},{"title":"error_stop_f08.fypp â€“ unittest","text":"This file depends on sourcefile~~error_stop_f08.fypp~~EfferentGraph sourcefile~error_stop_f08.fypp error_stop_f08.fypp sourcefile~mod_unittest.fypp mod_unittest.fypp sourcefile~error_stop_f08.fypp->sourcefile~mod_unittest.fypp sourcefile~mod_kinds.fypp mod_kinds.fypp sourcefile~mod_unittest.fypp->sourcefile~mod_kinds.fypp Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules error_stop_08 Source Code error_stop_f08.fypp Source Code submodule ( mod_unittest ) error_stop_08 implicit none contains module procedure error_stop !! Aborts the program with an exit code. <br> !  msg : Error message. <br> !  code : exit status (if fortran compiler supports). !         Specify an integer between 0 and 255. !         Otherwise, or if not specified, the default value of error stop is used. <br> !  #### Example !  ``` !  call error_stop(\"Error mesage\", 1) !  ``` if ( PRESENT ( msg )) then write ( STDERR , '(A)' , ADVANCE = \"NO\" ) msg // ' ' else if ( PRESENT ( code )) then if ( 0 <= code . and . code < 256 ) then write ( STDERR , '(A)' , ADVANCE = \"NO\" ) 'ERROR ' end if endif end if if ( PRESENT ( code )) then select case ( code ) #:for code in range(256) case ( ${ code }$ ); stop ${ code }$ #:endfor end select end if error stop end procedure error_stop end submodule error_stop_08","tags":"","loc":"sourcefile/error_stop_f08.fypp.html"},{"title":"allclose.fypp â€“ unittest","text":"This file depends on sourcefile~~allclose.fypp~~EfferentGraph sourcefile~allclose.fypp allclose.fypp sourcefile~mod_unittest.fypp mod_unittest.fypp sourcefile~allclose.fypp->sourcefile~mod_unittest.fypp sourcefile~mod_unittest_printer.f90 mod_unittest_printer.f90 sourcefile~allclose.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~mod_kinds.fypp mod_kinds.fypp sourcefile~mod_unittest.fypp->sourcefile~mod_kinds.fypp Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules allclose Source Code allclose.fypp Source Code #:include \"common.fypp\" submodule ( mod_unittest ) allclose use mod_unittest_printer implicit none integer , parameter :: DEF_MP = 10 ** 7 contains #:set erfs = [\"REAL(a - b, RK)\", \"ABS(a - b)\"] #:set fmts = [\"(A,G16.9,A,G16.9,A)\", \"(A,2(ES9.2,1X),A,2(ES9.2,1X),A)\"] #:set ktps = [REAL_KIND_TYPE_POSTS, COMPLEX_KIND_TYPE_POSTS] #:for ktp, fm, erf in zip(ktps, fmts, erfs) #:for kind, type, post in ktp #:for routine, op, neq in zip([\"assert_allclose\", \"assert_not_allclose\"], [\"<\", \">=\"], [\"\\~\", \"~ \"]) #:for rank1, rank2 in [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (2, 0), (3, 0), (4, 0)] module procedure ${ routine_name ( routine , post , rank1 , rank2 ) }$ logical err real ( ${ kind }$ ) :: tol ${ rank_check ( rank1 , rank2 ) }$ if ( PRESENT ( atol )) then ; tol = MAX ( atol , 0.0 _${ kind }$ ) else ; tol = 1E-8 _${ kind }$ end if if ( PRESENT ( rtol )) then ; tol = tol + MAX ( rtol , 0.0 _${ kind }$ ) else ; tol = tol + 1E-5 _${ kind }$ * MAXVAL ([ ABS ( a ), ABS ( b )]) end if call check_expr_all ( this % dev , this % num_test , ${ flatten ( routine + \"_\" + post + \"(a, b, tol)\" , rank1 , rank2 ) }$ , & & unitname , this % num_error , err ) end procedure ${ routine_name ( routine , post , rank1 , rank2 ) }$ ! #:endfor pure elemental function ${ routine }$_${ post }$ ( a , b , tol ) result ( res ) ${ type }$ , intent ( in ) :: a , b real ( ${ kind }$ ), intent ( in ) :: tol type ( expr_report ) :: res res % ok = ABS ( a - b ) ${ op }$ tol if ( res % ok ) then res % msg = \"\" else write ( res % msg , '${fm}$' ) \"[\" , a , \"]${neq}$[\" , tol , \"]\" end if res % error_rate = ${ erf }$ end function ${ routine }$_${ post }$ ! #:endfor #:endfor #:endfor end submodule allclose","tags":"","loc":"sourcefile/allclose.fypp.html"},{"title":"is_eye.fypp â€“ unittest","text":"This file depends on sourcefile~~is_eye.fypp~~EfferentGraph sourcefile~is_eye.fypp is_eye.fypp sourcefile~mod_unittest.fypp mod_unittest.fypp sourcefile~is_eye.fypp->sourcefile~mod_unittest.fypp sourcefile~mod_unittest_printer.f90 mod_unittest_printer.f90 sourcefile~is_eye.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~mod_kinds.fypp mod_kinds.fypp sourcefile~mod_unittest.fypp->sourcefile~mod_kinds.fypp Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules is_eye Source Code is_eye.fypp Source Code #:include \"common.fypp\" submodule ( mod_unittest ) is_eye use mod_unittest_printer implicit none integer , parameter :: DEF_MP = 10 ** 7 contains #:set fmts = [\"(A,I14,2X,A,I14,2X,A)\", \"(A,G16.9,A,G16.9,A)\", \"(A,2(ES9.2,1X),A,2(ES9.2,1X),A)\"] #:set ktps = [INTEGER_KIND_TYPE_POSTS, REAL_KIND_TYPE_POSTS, COMPLEX_KIND_TYPE_POSTS] #:for ktp, fm in zip(ktps, fmts) #:for kind, type, post in ktp #:for routine, op, neq in zip([\"assert_is_eye\", \"assert_isnot_eye\"], [\"<\", \">=\"], [\"\\~\", \"~ \"]) module procedure ${ routine_name ( routine , post , 2 ) }$ type ( expr_report ) :: expr ( SIZE ( a , 1 ), SIZE ( a , 2 )) logical :: err integer :: i , j , s1 , s2 this % num_test = this % num_test + 1 s1 = SIZE ( a , 1 ) s2 = SIZE ( a , 2 ) call check_rank ( this % dev , this % num_test , s1 , s2 , unitname , this % num_error , err ) if ( err ) return do concurrent ( i = 1 : s1 , j = 1 : s2 ) block real ( RK ) :: diff ${ type }$ :: b b = MERGE ( 1 , 0 , i == j ) diff = ABS ( a ( i , j ) - b ) if ( PRESENT ( place )) then ; diff = diff * 10 ** place else ; diff = diff * DEF_MP end if expr ( i , j )% ok = INT ( diff ) ${ op }$ 1 if ( expr ( i , j )% ok ) then expr ( i , j )% msg = \"\" expr ( i , j )% error_rate = 0.0_RK else write ( expr ( i , j )% msg , '${fm}$' ) \"[\" , a ( i , j ), \"]${neq}$[\" , b , \"]\" expr ( i , j )% error_rate = real ( a ( i , j ) - b , RK ) end if end block enddo call check_expr_all ( this % dev , this % num_test , [ expr ], & & unitname , this % num_error , err ) end procedure ${ routine_name ( routine , post , 2 ) }$ ! #:endfor #:endfor #:endfor end submodule is_eye","tags":"","loc":"sourcefile/is_eye.fypp.html"},{"title":"is_zero.fypp â€“ unittest","text":"This file depends on sourcefile~~is_zero.fypp~~EfferentGraph sourcefile~is_zero.fypp is_zero.fypp sourcefile~mod_unittest.fypp mod_unittest.fypp sourcefile~is_zero.fypp->sourcefile~mod_unittest.fypp sourcefile~mod_unittest_printer.f90 mod_unittest_printer.f90 sourcefile~is_zero.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~mod_kinds.fypp mod_kinds.fypp sourcefile~mod_unittest.fypp->sourcefile~mod_kinds.fypp Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules is_zero Source Code is_zero.fypp Source Code #:include \"common.fypp\" submodule ( mod_unittest ) is_zero use mod_unittest_printer implicit none integer , parameter :: DEF_MP = 10 ** 7 contains #:set fmts = [\"(A,I14,2X,A,I14,2X,A)\", \"(A,G16.9,A,G16.9,A)\", \"(A,2(ES9.2,1X),A,2(ES9.2,1X),A)\"] #:set ktps = [INTEGER_KIND_TYPE_POSTS, REAL_KIND_TYPE_POSTS, COMPLEX_KIND_TYPE_POSTS] #:for ktp, fm in zip(ktps, fmts) #:for kind, type, post in ktp #:for routine, op, neq in zip([\"assert_is_zero\", \"assert_isnot_zero\"], [\"<\", \">=\"], [\"\\~\", \"~ \"]) #:for rank in range(4) module procedure ${ routine_name ( routine , post , rank ) }$ logical :: err ${ type }$ :: b this % num_test = this % num_test + 1 b = 0 call check_expr_all ( this % dev , this % num_test , ${ flatten ( routine + \"_\" + post + \"(a, b, place)\" , rank ) }$ , & & unitname , this % num_error , err ) end procedure ${ routine_name ( routine , post , rank ) }$ ! #:endfor pure elemental function ${ routine }$_${ post }$ ( a , b , place ) result ( res ) ${ type }$ , intent ( in ) :: a , b integer , intent ( in ), optional :: place real ( RK ) :: diff type ( expr_report ) :: res diff = ABS ( a - b ) if ( PRESENT ( place )) then ; diff = diff * 10 ** place else ; diff = diff * DEF_MP end if res % ok = INT ( diff ) ${ op }$ 1 if ( res % ok ) then res % msg = \"\" else write ( res % msg , '${fm}$' ) \"[\" , a , \"]${neq}$[\" , b , \"]\" end if res % error_rate = real ( a - b , RK ) end function ${ routine }$_${ post }$ ! #:endfor #:endfor #:endfor end submodule is_zero","tags":"","loc":"sourcefile/is_zero.fypp.html"},{"title":"compare.fypp â€“ unittest","text":"This file depends on sourcefile~~compare.fypp~~EfferentGraph sourcefile~compare.fypp compare.fypp sourcefile~mod_unittest.fypp mod_unittest.fypp sourcefile~compare.fypp->sourcefile~mod_unittest.fypp sourcefile~mod_unittest_printer.f90 mod_unittest_printer.f90 sourcefile~compare.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~mod_kinds.fypp mod_kinds.fypp sourcefile~mod_unittest.fypp->sourcefile~mod_kinds.fypp Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules compare Source Code compare.fypp Source Code #:include \"common.fypp\" submodule ( mod_unittest ) compare use mod_unittest_printer implicit none contains #:set ktps = [INTEGER_KIND_TYPE_POSTS, REAL_KIND_TYPE_POSTS] #:set fmts = [\"(A,I14,2X,A,I14,2X,A)\", \"(A,G16.9,A,G16.9,A)\"] #:set routines = [\"assert_less\", \"assert_less_equal\", \"assert_greater\", \"assert_greater_equal\"] #:set ops = [\"<\", \"<=\", \">\", \">=\"] #:set neqs = [\">=\", \"> \", \"<=\", \"< \"] #:for ktp, fm in zip(ktps, fmts) #:for kind, type, post in ktp #:for routine, op, neq, rate in zip(routines, ops, neqs, [\"a - b\", \"a - b\", \"b - a\", \"b - a\"]) #:for rank2 in [0, 1] #:for rank1 in [0, 1] module procedure ${ routine_name ( routine , post , rank1 , rank2 ) }$ logical :: err ${ rank_check ( rank1 , rank2 ) }$ call check_expr_all ( this % dev , this % num_test , ${ flatten ( routine + \"_\" + post + \"(a, b)\" , rank1 , rank2 ) }$ ,& & unitname , this % num_error , err ) end procedure ${ routine_name ( routine , post , rank1 , rank2 ) }$ ! #:endfor #:endfor pure elemental function ${ routine }$_${ post }$ ( a , b ) result ( res ) ${ type }$ , intent ( in ) :: a , b type ( expr_report ) :: res res % ok = a ${ op }$ b if ( res % ok ) then res % msg = \"\" res % error_rate = 0.0_RK else write ( res % msg , '${fm}$' ) \"[\" , a , \"]${neq}$[\" , b , \"]\" res % error_rate = ${ rate }$ end if end function ${ routine }$_${ post }$ ! #:endfor #:endfor #:endfor end submodule compare","tags":"","loc":"sourcefile/compare.fypp.html"},{"title":"equal.fypp â€“ unittest","text":"This file depends on sourcefile~~equal.fypp~~EfferentGraph sourcefile~equal.fypp equal.fypp sourcefile~mod_unittest.fypp mod_unittest.fypp sourcefile~equal.fypp->sourcefile~mod_unittest.fypp sourcefile~mod_unittest_printer.f90 mod_unittest_printer.f90 sourcefile~equal.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~mod_kinds.fypp mod_kinds.fypp sourcefile~mod_unittest.fypp->sourcefile~mod_kinds.fypp Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules equal Source Code equal.fypp Source Code #:include \"common.fypp\" submodule ( mod_unittest ) equal use mod_unittest_printer implicit none contains #:def error_rate(type) $ : \"MERGE(1.0_RK,-1.0_RK,a)\" if \"logical\" in type else \"REAL(a - b, RK)\" #:enddef #:set routines = [\"assert_equal\", \"assert_not_equal\"] #:set ktps = [INTEGER_KIND_TYPE_POSTS, LOGICAL_KIND_TYPE_POSTS] #:set oplists = [[\"==\", \"/=\"], [\".eqv.\", \".neqv.\"]] #:set neqlists = [[\"/=\", \"==\"], [\"noteq\", \"equiv\"]] #:set fmts = [\"(A,I14,2X,A,I14,2X,A)\", \"(A,L9,7X,A,L9,7X,A)\"] #:for ktp, oplist, neqlist, fm in zip(ktps, oplists, neqlists, fmts) #:for kind, type, post in ktp #:for routine, op, neq in zip(routines, oplist, neqlist) #:for rank1, rank2 in [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (2, 0), (3, 0), (4, 0)] module procedure ${ routine_name ( routine , post , rank1 , rank2 ) }$ logical :: err ${ rank_check ( rank1 , rank2 ) }$ call check_expr_all ( this % dev , this % num_test , ${ flatten ( routine + \"_\" + post + \"(a,b)\" , rank1 , rank2 ) }$ , & & unitname , this % num_error , err ) end procedure ${ routine_name ( routine , post , rank1 , rank2 ) }$ ! #:endfor pure elemental function ${ routine }$_${ post }$ ( a , b ) result ( res ) ${ type }$ , intent ( in ) :: a , b type ( expr_report ) :: res res % ok = a ${ op }$ b if ( res % ok ) then res % msg = \"\" res % error_rate = 0.0_RK else write ( res % msg , '${fm}$' ) \"[\" , a , \"]${neq}$[\" , b , \"]\" res % error_rate = ${ error_rate ( type ) }$ endif end function ${ routine }$_${ post }$ ! #:endfor #:endfor #:endfor end submodule equal","tags":"","loc":"sourcefile/equal.fypp.html"},{"title":"error_stop_f18.fypp â€“ unittest","text":"This file depends on sourcefile~~error_stop_f18.fypp~~EfferentGraph sourcefile~error_stop_f18.fypp error_stop_f18.fypp sourcefile~mod_unittest.fypp mod_unittest.fypp sourcefile~error_stop_f18.fypp->sourcefile~mod_unittest.fypp sourcefile~mod_kinds.fypp mod_kinds.fypp sourcefile~mod_unittest.fypp->sourcefile~mod_kinds.fypp Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules error_stop_f18 Source Code error_stop_f18.fypp Source Code submodule ( mod_unittest ) error_stop_f18 implicit none contains module procedure error_stop !! Aborts the program with an exit code. <br> !  msg : Error message. <br> !  code : exit status (if fortran compiler supports). !         Specify an integer between 0 and 255. !         Otherwise, or if not specified, the default value of error stop is used. <br> !  #### Example !  ``` !  call error_stop(\"Error mesage\", 1) !  ``` if ( PRESENT ( msg )) then write ( STDERR , '(A)' , ADVANCE = \"NO\" ) msg // ' ' end if if ( PRESENT ( code )) then select case ( code ) #:for code in range(256) case ( ${ code }$ ); error stop ${ code }$ #:endfor end select end if error stop end procedure error_stop end submodule error_stop_f18","tags":"","loc":"sourcefile/error_stop_f18.fypp.html"},{"title":"bool.fypp â€“ unittest","text":"This file depends on sourcefile~~bool.fypp~~EfferentGraph sourcefile~bool.fypp bool.fypp sourcefile~mod_unittest.fypp mod_unittest.fypp sourcefile~bool.fypp->sourcefile~mod_unittest.fypp sourcefile~mod_unittest_printer.f90 mod_unittest_printer.f90 sourcefile~bool.fypp->sourcefile~mod_unittest_printer.f90 sourcefile~mod_kinds.fypp mod_kinds.fypp sourcefile~mod_unittest.fypp->sourcefile~mod_kinds.fypp Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules bool Source Code bool.fypp Source Code #:include \"common.fypp\" submodule ( mod_unittest ) bool use mod_unittest_printer implicit none contains #:for routine, op in zip([\"assert\", \"assert_true\", \"assert_false\"], [\"\", \"\", \".not.\"]) #:for kind, type, post in LOGICAL_KIND_TYPE_POSTS #:for rank in [0, 1, 2, 3] module procedure ${ routine_name ( routine , post , rank ) }$ logical :: err this % num_test = this % num_test + 1 call check_expr_all ( this % dev , this % num_test , ${ flatten ( routine + \"_\" + post + \"(expr)\" , rank ) }$ , & & unitname , this % num_error , err ) end procedure ${ routine_name ( routine , post , rank ) }$ ! #:endfor #:endfor pure elemental function ${ routine }$_${ post }$ ( expr ) result ( res ) ${ type }$ , intent ( in ) :: expr type ( expr_report ) :: res res % ok = ${ op }$ expr if ( res % ok ) then res % msg = \"\" res % error_rate = 0.0_RK else res % msg = \"  xxx\" res % error_rate = 1.0_RK end if end function ${ routine }$_${ post }$ ! #:endfor end submodule bool","tags":"","loc":"sourcefile/bool.fypp.html"}]}